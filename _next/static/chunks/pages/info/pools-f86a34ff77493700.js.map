{"version":3,"file":"static/chunks/pages/info/pools-f86a34ff77493700.js","mappings":"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","sources":["webpack://_N_E/?47c1","webpack://_N_E/./src/views/Info/Pools/index.tsx","webpack://_N_E/./src/pages/info/pools/index.tsx","webpack://_N_E/./src/views/Info/components/InfoTables/PoolsTable.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/info/pools\",\n      function () {\n        return require(\"private-next-pages/info/pools/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/info/pools\"])\n      });\n    }\n  ","import { useMemo } from 'react'\nimport { Text, Heading, Card } from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport { useAllPoolData, usePoolDatas } from 'state/info/hooks'\nimport { useWatchlistPools } from 'state/user/hooks'\nimport { useTranslation } from 'contexts/Localization'\n\nconst PoolsOverview: React.FC<React.PropsWithChildren> = () => {\n  const { t } = useTranslation()\n\n  // get all the pool datas that exist\n  const allPoolData = useAllPoolData()\n  const poolDatas = useMemo(() => {\n    return Object.values(allPoolData)\n      .map((pool) => pool.data)\n      .filter((pool) => pool)\n  }, [allPoolData])\n\n  const [savedPools] = useWatchlistPools()\n  const watchlistPools = usePoolDatas(savedPools)\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\">\n        {t('Your Watchlist')}\n      </Heading>\n      <Card>\n        {watchlistPools.length > 0 ? (\n          <PoolTable poolDatas={watchlistPools} />\n        ) : (\n          <Text px=\"24px\" py=\"16px\">\n            {t('Saved pools will appear here')}\n          </Text>\n        )}\n      </Card>\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\" id=\"info-pools-title\">\n        {t('All Pools')}\n      </Heading>\n      <PoolTable poolDatas={poolDatas} />\n    </Page>\n  )\n}\n\nexport default PoolsOverview\n","import Pools from 'views/Info/Pools'\nimport { InfoPageLayout } from 'views/Info'\n\nconst InfoPoolsPage = () => {\n  return <Pools />\n}\n\nInfoPoolsPage.Layout = InfoPageLayout\nInfoPoolsPage.chains = [] // set all\n\nexport default InfoPoolsPage\n\n\n// import { NotFound } from '@pancakeswap/uikit'\n\n// const NotFoundPage = () => <NotFound />\n\n// NotFoundPage.chains = []\n\n// export default NotFoundPage","import { useCallback, useState, useMemo, useEffect, Fragment } from 'react'\nimport styled from 'styled-components'\nimport { NextLinkFromReactRouter } from 'components/NextLink'\nimport { Text, Flex, Box, Skeleton, ArrowBackIcon, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { formatAmount } from 'utils/formatInfoNumbers'\nimport { PoolData } from 'state/info/types'\nimport { ITEMS_PER_INFO_TABLE_PAGE } from 'config/constants/info'\nimport { DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { useTranslation } from 'contexts/Localization'\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\n\n/**\n *  Columns on different layouts\n *  5 = | # | Pool | TVL | Volume 24H | Volume 7D |\n *  4 = | # | Pool |     | Volume 24H | Volume 7D |\n *  3 = | # | Pool |     | Volume 24H |           |\n *  2 = |   | Pool |     | Volume 24H |           |\n */\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n  grid-template-columns: 20px 3.5fr repeat(5, 1fr);\n\n  padding: 0 24px;\n  @media screen and (max-width: 900px) {\n    grid-template-columns: 20px 1.5fr repeat(3, 1fr);\n    & :nth-child(4),\n    & :nth-child(5) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 500px) {\n    grid-template-columns: 20px 1.5fr repeat(1, 1fr);\n    & :nth-child(4),\n    & :nth-child(5),\n    & :nth-child(6),\n    & :nth-child(7) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 480px) {\n    grid-template-columns: 2.5fr repeat(1, 1fr);\n    > *:nth-child(1) {\n      display: none;\n    }\n  }\n`\n\nconst LinkWrapper = styled(NextLinkFromReactRouter)`\n  text-decoration: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst SORT_FIELD = {\n  volumeUSD: 'volumeUSD',\n  liquidityUSD: 'liquidityUSD',\n  volumeUSDWeek: 'volumeUSDWeek',\n  lpFees24h: 'lpFees24h',\n  lpApr7d: 'lpApr7d',\n}\n\nconst LoadingRow: React.FC<React.PropsWithChildren> = () => (\n  <ResponsiveGrid>\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n  </ResponsiveGrid>\n)\n\nconst TableLoader: React.FC<React.PropsWithChildren> = () => (\n  <>\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n  </>\n)\n\nconst DataRow = ({ poolData, index }: { poolData: PoolData; index: number }) => {\n  return (\n    <LinkWrapper to={`/info/pools/${poolData.address}`}>\n      <ResponsiveGrid>\n        <Text>{index + 1}</Text>\n        <Flex>\n          <DoubleCurrencyLogo address0={poolData.token0.address} address1={poolData.token1.address} />\n          <Text ml=\"8px\">\n            {poolData.token0.symbol}/{poolData.token1.symbol}\n          </Text>\n        </Flex>\n        <Text>${formatAmount(poolData.volumeUSD)}</Text>\n        <Text>${formatAmount(poolData.volumeUSDWeek)}</Text>\n        <Text>${formatAmount(poolData.lpFees24h)}</Text>\n        <Text>{formatAmount(poolData.lpApr7d)}%</Text>\n        <Text>${formatAmount(poolData.liquidityUSD)}</Text>\n      </ResponsiveGrid>\n    </LinkWrapper>\n  )\n}\n\ninterface PoolTableProps {\n  poolDatas: PoolData[]\n  loading?: boolean // If true shows indication that SOME pools are loading, but the ones already fetched will be shown\n}\n\nconst PoolTable: React.FC<React.PropsWithChildren<PoolTableProps>> = ({ poolDatas, loading }) => {\n  // for sorting\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n  const { t } = useTranslation()\n\n  // pagination\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n  useEffect(() => {\n    let extraPages = 1\n    if (poolDatas.length % ITEMS_PER_INFO_TABLE_PAGE === 0) {\n      extraPages = 0\n    }\n    setMaxPage(Math.floor(poolDatas.length / ITEMS_PER_INFO_TABLE_PAGE) + extraPages)\n  }, [poolDatas])\n\n  const sortedPools = useMemo(() => {\n    return poolDatas\n      ? poolDatas\n          .sort((a, b) => {\n            if (a && b) {\n              return a[sortField as keyof PoolData] > b[sortField as keyof PoolData]\n                ? (sortDirection ? -1 : 1) * 1\n                : (sortDirection ? -1 : 1) * -1\n            }\n            return -1\n          })\n          .slice(ITEMS_PER_INFO_TABLE_PAGE * (page - 1), page * ITEMS_PER_INFO_TABLE_PAGE)\n      : []\n  }, [page, poolDatas, sortDirection, sortField])\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  return (\n    <TableWrapper>\n      <ResponsiveGrid>\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          #\n        </Text>\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Pool')}\n        </Text>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSDWeek)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 7D')} {arrow(SORT_FIELD.volumeUSDWeek)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpFees24h)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward fees 24H')} {arrow(SORT_FIELD.lpFees24h)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpApr7d)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward APR')} {arrow(SORT_FIELD.lpApr7d)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.liquidityUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Liquidity')} {arrow(SORT_FIELD.liquidityUSD)}\n        </ClickableColumnHeader>\n      </ResponsiveGrid>\n      <Break />\n      {sortedPools.length > 0 ? (\n        <>\n          {sortedPools.map((poolData, i) => {\n            if (poolData) {\n              return (\n                <Fragment key={poolData.address}>\n                  <DataRow index={(page - 1) * ITEMS_PER_INFO_TABLE_PAGE + i} poolData={poolData} />\n                  <Break />\n                </Fragment>\n              )\n            }\n            return null\n          })}\n          {loading && <LoadingRow />}\n          <PageButtons>\n            <Arrow\n              onClick={() => {\n                setPage(page === 1 ? page : page - 1)\n              }}\n            >\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n            </Arrow>\n\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n\n            <Arrow\n              onClick={() => {\n                setPage(page === maxPage ? page : page + 1)\n              }}\n            >\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n            </Arrow>\n          </PageButtons>\n        </>\n      ) : (\n        <>\n          <TableLoader />\n          {/* spacer */}\n          <Box />\n        </>\n      )}\n    </TableWrapper>\n  )\n}\n\nexport default PoolTable\n"],"names":["window","__NEXT_P","push","useTranslation","t","allPoolData","useAllPoolData","poolDatas","useMemo","Object","values","map","pool","data","filter","savedPools","useWatchlistPools","watchlistPools","usePoolDatas","Page","Heading","scale","mb","Card","length","PoolTable","Text","px","py","mt","id","InfoPoolsPage","Pools","Layout","InfoPageLayout","chains","ResponsiveGrid","styled","LinkWrapper","NextLinkFromReactRouter","SORT_FIELD","LoadingRow","Skeleton","TableLoader","DataRow","poolData","index","to","address","Flex","DoubleCurrencyLogo","address0","token0","address1","token1","ml","symbol","formatAmount","volumeUSD","volumeUSDWeek","lpFees24h","lpApr7d","liquidityUSD","loading","useState","sortField","setSortField","sortDirection","setSortDirection","page","setPage","maxPage","setMaxPage","useEffect","extraPages","ITEMS_PER_INFO_TABLE_PAGE","Math","floor","sortedPools","sort","a","b","slice","handleSort","useCallback","newField","arrow","field","TableWrapper","color","fontSize","bold","textTransform","ClickableColumnHeader","onClick","Break","i","Fragment","PageButtons","Arrow","ArrowBackIcon","ArrowForwardIcon","Box"],"sourceRoot":""}