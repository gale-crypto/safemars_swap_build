{"version":3,"file":"static/chunks/pages/add/[[...currency]]-67e9e11710a2719c.js","mappings":"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","sources":["webpack://_N_E/?b070","webpack://_N_E/./packages/uikit/src/components/Card/CardFooter.tsx","webpack://_N_E/./packages/uikit/src/components/Svg/Icons/ArrowDropDown.tsx","webpack://_N_E/./src/components/UnsupportedCurrencyFooter.tsx","webpack://_N_E/./src/views/AddLiquidity/PoolPriceBar.tsx","webpack://_N_E/./src/views/AddLiquidity/components/common.tsx","webpack://_N_E/./src/views/AddLiquidity/components/ConfirmAddLiquidityModal.tsx","webpack://_N_E/./src/views/AddLiquidity/components/ConfirmZapInModal.tsx","webpack://_N_E/./src/components/CurrencySelect/index.tsx","webpack://_N_E/./src/views/AddLiquidity/useCurrencySelectRoute.ts","webpack://_N_E/./src/views/AddLiquidity/ChoosePair.tsx","webpack://_N_E/./src/views/AddLiquidity/index.tsx","webpack://_N_E/./src/views/AddLiquidity/AddStableLiquidity/index.tsx","webpack://_N_E/./src/pages/add/[[...currency]].tsx","webpack://_N_E/./src/utils/maxAmountSpend.ts"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/add/[[...currency]]\",\n      function () {\n        return require(\"private-next-pages/add/[[...currency]].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/add/[[...currency]]\"])\n      });\n    }\n  ","import _tagged_template_literal from \"@swc/helpers/src/_tagged_template_literal.mjs\";\nfunction _templateObject() {\n    var data = _tagged_template_literal([\n        \"\\n  border-top: 1px solid \",\n        \";\\n  \",\n        \"\\n\"\n    ]);\n    _templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\nimport styled from \"styled-components\";\nimport { space } from \"styled-system\";\nvar CardFooter = styled.div.withConfig({\n    componentId: \"sc-5ed8a823-0\"\n})(_templateObject(), function(param) {\n    var theme = param.theme;\n    return theme.colors.cardBorder;\n}, space);\nCardFooter.defaultProps = {\n    p: \"24px\"\n};\nexport default CardFooter;\n","import _object_spread from \"@swc/helpers/src/_object_spread.mjs\";\nimport _object_spread_props from \"@swc/helpers/src/_object_spread_props.mjs\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport Svg from \"../Svg\";\nvar Icon = function(props) {\n    return /*#__PURE__*/ _jsx(Svg, _object_spread_props(_object_spread({\n        viewBox: \"0 0 24 24\"\n    }, props), {\n        children: /*#__PURE__*/ _jsx(\"path\", {\n            d: \"M8.71005 11.71L11.3001 14.3C11.6901 14.69 12.3201 14.69 12.7101 14.3L15.3001 11.71C15.9301 11.08 15.4801 10 14.5901 10H9.41005C8.52005 10 8.08005 11.08 8.71005 11.71Z\"\n        })\n    }));\n};\nexport default Icon;\n","import { Currency, Token } from '@pancakeswap/sdk'\nimport { Button, Text, Modal, useModal, InjectedModalProps, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { AutoRow } from 'components/Layout/Row'\nimport { AutoColumn } from 'components/Layout/Column'\nimport { CurrencyLogo } from 'components/Logo'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBlockExploreLink } from 'utils'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { useUnsupportedTokens } from '../hooks/Tokens'\n\ninterface Props extends InjectedModalProps {\n  currencies: (Currency | undefined)[]\n}\n\nconst DetailsFooter = styled.div`\n  padding: 8px 0;\n  width: 100%;\n  max-width: 400px;\n  border-bottom-left-radius: 20px;\n  border-bottom-right-radius: 20px;\n  color: ${({ theme }) => theme.colors.text};\n  background-color: ${({ theme }) => theme.colors.invertedContrast};\n  text-align: center;\n`\n\nconst UnsupportedModal: React.FC<React.PropsWithChildren<Props>> = ({ currencies, onDismiss }) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const tokens =\n    chainId && currencies\n      ? currencies.map((currency) => {\n          return wrappedCurrency(currency, chainId)\n        })\n      : []\n\n  const unsupportedTokens: { [address: string]: Token } = useUnsupportedTokens()\n\n  return (\n    <Modal title={t('Unsupported Assets')} onDismiss={onDismiss}>\n      <AutoColumn gap=\"lg\">\n        {tokens.map((token) => {\n          return (\n            token &&\n            unsupportedTokens &&\n            Object.keys(unsupportedTokens).includes(token.address) && (\n              <AutoColumn key={token.address?.concat('not-supported')} gap=\"10px\">\n                <AutoRow gap=\"5px\" align=\"center\">\n                  <CurrencyLogo currency={token} size=\"24px\" />\n                  <Text>{token.symbol}</Text>\n                </AutoRow>\n                {chainId && (\n                  <Link\n                    external\n                    small\n                    color=\"primaryDark\"\n                    href={getBlockExploreLink(token.address, 'address', chainId)}\n                  >\n                    {token.address}\n                  </Link>\n                )}\n              </AutoColumn>\n            )\n          )\n        })}\n        <AutoColumn gap=\"lg\">\n          <Text>\n            {t(\n              'Some assets are not available through this interface because they may not work well with our smart contract or we are unable to allow trading for legal reasons.',\n            )}\n          </Text>\n        </AutoColumn>\n      </AutoColumn>\n    </Modal>\n  )\n}\n\nexport default function UnsupportedCurrencyFooter({ currencies }: { currencies: (Currency | undefined)[] }) {\n  const { t } = useTranslation()\n  const [onPresentModal] = useModal(<UnsupportedModal currencies={currencies} />)\n\n  return (\n    <DetailsFooter>\n      <Button variant=\"text\" onClick={onPresentModal}>\n        {t('Read more about unsupported assets')}\n      </Button>\n    </DetailsFooter>\n  )\n}\n","import { Currency, Percent, Price } from '@pancakeswap/sdk'\nimport { Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { ONE_BIPS } from 'config/constants/exchange'\nimport { AutoColumn } from '../../components/Layout/Column'\nimport { AutoRow } from '../../components/Layout/Row'\nimport { Field } from '../../state/mint/actions'\n\nfunction PoolPriceBar({\n  currencies,\n  noLiquidity,\n  poolTokenPercentage,\n  price,\n}: {\n  currencies: { [field in Field]?: Currency }\n  noLiquidity?: boolean\n  poolTokenPercentage?: Percent\n  price?: Price<Currency, Currency>\n}) {\n  const { t } = useTranslation()\n\n  return (\n    <AutoColumn gap=\"md\">\n      <AutoRow justify=\"space-around\" gap=\"4px\">\n        <AutoColumn justify=\"center\">\n          <Text>{price?.toSignificant(6) ?? '-'}</Text>\n          <Text fontSize=\"14px\" pt={1}>\n            {t('%assetA% per %assetB%', {\n              assetA: currencies[Field.CURRENCY_B]?.symbol ?? '',\n              assetB: currencies[Field.CURRENCY_A]?.symbol ?? '',\n            })}\n          </Text>\n        </AutoColumn>\n        <AutoColumn justify=\"center\">\n          <Text>{price?.invert()?.toSignificant(6) ?? '-'}</Text>\n          <Text fontSize=\"14px\" pt={1}>\n            {t('%assetA% per %assetB%', {\n              assetA: currencies[Field.CURRENCY_A]?.symbol ?? '',\n              assetB: currencies[Field.CURRENCY_B]?.symbol ?? '',\n            })}\n          </Text>\n        </AutoColumn>\n        <AutoColumn justify=\"center\">\n          <Text>\n            {noLiquidity && price\n              ? '100'\n              : (poolTokenPercentage?.lessThan(ONE_BIPS) ? '<0.01' : poolTokenPercentage?.toFixed(2)) ?? '0'}\n            %\n          </Text>\n          <Text fontSize=\"14px\" pt={1}>\n            {t('Share of Pool')}\n          </Text>\n        </AutoColumn>\n      </AutoRow>\n    </AutoColumn>\n  )\n}\n\nexport default PoolPriceBar\n","import React from 'react'\nimport { Currency, Fraction, Percent, CurrencyAmount, Token } from '@pancakeswap/sdk'\nimport { Text, useTooltip, TooltipText, Box, Flex, Svg, SvgProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { AutoColumn } from 'components/Layout/Column'\nimport { AutoRow, RowBetween } from 'components/Layout/Row'\nimport { Field } from 'state/burn/actions'\nimport { DoubleCurrencyLogo, CurrencyLogo } from 'components/Logo'\nimport { GreyCard } from 'components/Card'\nimport { getLPSymbol } from 'utils/getLpSymbol'\n\nconst Dot = styled(Box)<{ scale?: 'sm' | 'md' }>`\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n`\n\nconst CircleSvg = ({ percent = 1, ...props }: SvgProps & { percent?: number }) => (\n  <Svg width=\"60px\" height=\"60px\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <g filter=\"url(#filter0_i_1147_113741)\">\n      <circle r=\"10\" cx=\"10\" cy=\"10\" fill=\"#7645D9\" />\n      <circle\n        r=\"5\"\n        cx=\"10\"\n        cy=\"10\"\n        fill=\"transparent\"\n        stroke=\"#1FC7D4\"\n        strokeWidth=\"10\"\n        strokeDasharray={`calc(${percent * 100}px * 31.4 / 100) 31.4`}\n        transform=\"rotate(-90) translate(-20)\"\n      />\n    </g>\n    <defs>\n      <filter\n        id=\"filter0_i_1147_113741\"\n        x={0}\n        y={0}\n        width={60}\n        height={60}\n        filterUnits=\"userSpaceOnUse\"\n        colorInterpolationFilters=\"sRGB\"\n      >\n        <feFlood floodOpacity={0} result=\"BackgroundImageFix\" />\n        <feBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n        <feColorMatrix in=\"SourceAlpha\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" result=\"hardAlpha\" />\n        <feOffset dy={-2} />\n        <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2={-1} k3={1} />\n        <feColorMatrix values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0\" />\n        <feBlend in2=\"shape\" result=\"effect1_innerShadow_1147_113741\" />\n      </filter>\n    </defs>\n  </Svg>\n)\n\nconst Subtitle: React.FC<React.PropsWithChildren> = ({ children }) => {\n  return (\n    <Text fontSize=\"12px\" textTransform=\"uppercase\" bold color=\"secondary\">\n      {children}\n    </Text>\n  )\n}\n\nexport const PairDistribution = ({\n  title,\n  percent,\n  currencyA,\n  currencyB,\n  currencyAValue,\n  currencyBValue,\n  tooltipTargetRef,\n}: {\n  title: React.ReactNode\n  percent?: number\n  currencyA?: Currency\n  currencyB?: Currency\n  currencyAValue?: string\n  currencyBValue?: string\n  tooltipTargetRef?: any\n}) => {\n  return (\n    <AutoColumn gap=\"8px\">\n      <Subtitle>{title}</Subtitle>\n      <Flex>\n        {typeof percent !== 'undefined' && (\n          <div ref={tooltipTargetRef}>\n            <CircleSvg percent={percent} mr=\"34px\" />\n          </div>\n        )}\n        <AutoColumn style={{ width: '100%' }}>\n          {currencyA && (\n            <RowBetween>\n              <AutoRow gap=\"4px\">\n                <Dot bg=\"primary\" />\n                <CurrencyLogo currency={currencyA} />\n                <Text>{currencyA?.symbol}</Text>\n              </AutoRow>\n              <Text>{currencyAValue}</Text>\n            </RowBetween>\n          )}\n\n          {currencyB && (\n            <RowBetween>\n              <AutoRow gap=\"4px\">\n                <Dot bg=\"secondary\" />\n                <CurrencyLogo currency={currencyB} />\n                <Text>{currencyB?.symbol}</Text>\n              </AutoRow>\n              <Text>{currencyBValue}</Text>\n            </RowBetween>\n          )}\n        </AutoColumn>\n      </Flex>\n    </AutoColumn>\n  )\n}\n\ninterface AddLiquidityModalHeaderProps {\n  currencies: { [field in Field]?: Currency }\n  poolTokenPercentage?: Percent\n  liquidityMinted: CurrencyAmount<Token>\n  price: Fraction\n  allowedSlippage: number\n  children: React.ReactNode\n  noLiquidity?: boolean\n}\n\nexport const AddLiquidityModalHeader = ({\n  currencies,\n  poolTokenPercentage,\n  liquidityMinted,\n  price,\n  allowedSlippage,\n  noLiquidity,\n  children,\n}: AddLiquidityModalHeaderProps) => {\n  const { t } = useTranslation()\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(\n    t('Output is estimated. If the price changes by more than %slippage%% your transaction will revert.', {\n      slippage: allowedSlippage / 100,\n    }),\n    { placement: 'auto' },\n  )\n\n  return (\n    <AutoColumn gap=\"24px\">\n      <AutoColumn gap=\"8px\">\n        <Subtitle>{t('You will receive')}</Subtitle>\n        <GreyCard>\n          <RowBetween>\n            <AutoRow gap=\"4px\">\n              <DoubleCurrencyLogo\n                currency0={currencies[Field.CURRENCY_A]}\n                currency1={currencies[Field.CURRENCY_B]}\n                size={24}\n              />\n              <Text color=\"textSubtle\">\n                {currencies[Field.CURRENCY_A]?.symbol &&\n                  currencies[Field.CURRENCY_B]?.symbol &&\n                  getLPSymbol(currencies[Field.CURRENCY_A]?.symbol, currencies[Field.CURRENCY_B]?.symbol)}\n              </Text>\n            </AutoRow>\n            <Text ml=\"8px\">{liquidityMinted?.toSignificant(6)}</Text>\n          </RowBetween>\n        </GreyCard>\n      </AutoColumn>\n      <RowBetween>\n        <Subtitle>{t('Your pool share')}</Subtitle>\n        <Text>{noLiquidity ? '100' : poolTokenPercentage?.toSignificant(4)}%</Text>\n      </RowBetween>\n      <AutoColumn gap=\"8px\">{children}</AutoColumn>\n      <AutoColumn>\n        <RowBetween>\n          <Subtitle>{t('Rates')}</Subtitle>\n          <Text>\n            {`1 ${currencies[Field.CURRENCY_A]?.symbol} = ${price?.toSignificant(4)} ${\n              currencies[Field.CURRENCY_B]?.symbol\n            }`}\n          </Text>\n        </RowBetween>\n        <RowBetween style={{ justifyContent: 'flex-end' }}>\n          <Text>\n            {`1 ${currencies[Field.CURRENCY_B]?.symbol} = ${price?.invert().toSignificant(4)} ${\n              currencies[Field.CURRENCY_A]?.symbol\n            }`}\n          </Text>\n        </RowBetween>\n      </AutoColumn>\n      {!noLiquidity && (\n        <RowBetween>\n          <Subtitle>{t('Slippage Tolerance')}</Subtitle>\n          <TooltipText ref={targetRef}>{allowedSlippage / 100}%</TooltipText>\n          {tooltipVisible && tooltip}\n        </RowBetween>\n      )}\n    </AutoColumn>\n  )\n}\n","import React, { useCallback } from 'react'\nimport { Currency, CurrencyAmount, Fraction, Percent, Token } from '@pancakeswap/sdk'\nimport { InjectedModalProps, Button } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport TransactionConfirmationModal, {\n  ConfirmationModalContent,\n  TransactionErrorContent,\n} from 'components/TransactionConfirmationModal'\nimport { Field } from 'state/burn/actions'\nimport _toNumber from 'lodash/toNumber'\nimport { AddLiquidityModalHeader, PairDistribution } from './common'\n\ninterface ConfirmAddLiquidityModalProps {\n  title: string\n  customOnDismiss: () => void\n  attemptingTxn: boolean\n  hash: string\n  pendingText: string\n  currencies: { [field in Field]?: Currency }\n  noLiquidity: boolean\n  allowedSlippage: number\n  liquidityErrorMessage: string\n  price: Fraction\n  parsedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  onAdd: () => void\n  poolTokenPercentage: Percent\n  liquidityMinted: CurrencyAmount<Token>\n  currencyToAdd: Token\n  isStable?: boolean\n}\n\nconst ConfirmAddLiquidityModal: React.FC<\n  React.PropsWithChildren<InjectedModalProps & ConfirmAddLiquidityModalProps>\n> = ({\n  title,\n  onDismiss,\n  customOnDismiss,\n  attemptingTxn,\n  hash,\n  pendingText,\n  price,\n  currencies,\n  noLiquidity,\n  allowedSlippage,\n  parsedAmounts,\n  liquidityErrorMessage,\n  onAdd,\n  poolTokenPercentage,\n  liquidityMinted,\n  currencyToAdd,\n  isStable,\n}) => {\n  const { t } = useTranslation()\n\n  let percent = 0.5\n\n  // Calculate distribution percentage for display\n  if (isStable && parsedAmounts[Field.CURRENCY_A] && parsedAmounts[Field.CURRENCY_B]) {\n    const amountCurrencyA = _toNumber(parsedAmounts[Field.CURRENCY_A].toSignificant(6))\n    const amountCurrencyB = _toNumber(parsedAmounts[Field.CURRENCY_B].toSignificant(6))\n\n    percent = amountCurrencyA / (amountCurrencyA + amountCurrencyB)\n  }\n\n  const modalHeader = useCallback(() => {\n    return (\n      <AddLiquidityModalHeader\n        allowedSlippage={allowedSlippage}\n        currencies={currencies}\n        liquidityMinted={liquidityMinted}\n        poolTokenPercentage={poolTokenPercentage}\n        price={price}\n        noLiquidity={noLiquidity}\n      >\n        <PairDistribution\n          title={t('Input')}\n          percent={percent}\n          currencyA={currencies[Field.CURRENCY_A]}\n          currencyAValue={parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}\n          currencyB={currencies[Field.CURRENCY_B]}\n          currencyBValue={parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}\n        />\n      </AddLiquidityModalHeader>\n    )\n  }, [allowedSlippage, percent, currencies, liquidityMinted, noLiquidity, parsedAmounts, poolTokenPercentage, price, t])\n\n  const modalBottom = useCallback(() => {\n    return (\n      <Button width=\"100%\" onClick={onAdd} mt=\"20px\">\n        {noLiquidity ? t('Create Pool & Supply') : t('Confirm Supply')}\n      </Button>\n    )\n  }, [noLiquidity, onAdd, t])\n\n  const confirmationContent = useCallback(\n    () =>\n      liquidityErrorMessage ? (\n        <TransactionErrorContent onDismiss={onDismiss} message={liquidityErrorMessage} />\n      ) : (\n        <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />\n      ),\n    [onDismiss, modalBottom, modalHeader, liquidityErrorMessage],\n  )\n\n  return (\n    <TransactionConfirmationModal\n      minWidth={['100%', , '420px']}\n      title={title}\n      onDismiss={onDismiss}\n      customOnDismiss={customOnDismiss}\n      attemptingTxn={attemptingTxn}\n      currencyToAdd={currencyToAdd}\n      hash={hash}\n      content={confirmationContent}\n      pendingText={pendingText}\n    />\n  )\n}\n\nexport default ConfirmAddLiquidityModal\n","import React, { useCallback, useMemo } from 'react'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Currency, CurrencyAmount, Fraction, JSBI, Pair, Percent, Token } from '@pancakeswap/sdk'\nimport { InjectedModalProps, Text, ArrowDownIcon, Button, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport TransactionConfirmationModal, {\n  ConfirmationModalContent,\n  TransactionErrorContent,\n} from 'components/TransactionConfirmationModal'\nimport { AutoColumn } from 'components/Layout/Column'\nimport { AutoRow, RowFixed } from 'components/Layout/Row'\nimport { Field } from 'state/burn/actions'\nimport { CurrencyLogo } from 'components/Logo'\nimport useTotalSupply from 'hooks/useTotalSupply'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { PairDistribution, AddLiquidityModalHeader } from './common'\nimport { ZapErrorMessages } from './ZapErrorMessage'\n\ninterface ConfirmZapInModalProps {\n  title: string\n  customOnDismiss: () => void\n  attemptingTxn: boolean\n  hash: string\n  pendingText: string\n  currencies: { [field in Field]?: Currency }\n  allowedSlippage: number\n  liquidityErrorMessage: string\n  price: Fraction\n  parsedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  onAdd: () => void\n  poolTokenPercentage: Percent\n  liquidityMinted: CurrencyAmount<Token>\n  pair: Pair\n  rebalancing?: boolean\n  zapSwapTokenField: Field\n  zapSwapOutTokenField: Field\n  zapInEstimated: {\n    swapAmountIn: BigNumber\n    swapAmountOut: BigNumber\n    isToken0Sold: boolean\n  }\n  zapMode: boolean\n  toggleZapMode: (value: boolean) => void\n}\n\nconst clamp = (num: number, min: number, max: number) => Math.min(Math.max(num, min), max)\n\nconst ConfirmZapInModal: React.FC<React.PropsWithChildren<InjectedModalProps & ConfirmZapInModalProps>> = ({\n  title,\n  onDismiss,\n  customOnDismiss,\n  attemptingTxn,\n  hash,\n  pendingText,\n  price,\n  currencies,\n  zapSwapTokenField,\n  zapSwapOutTokenField,\n  allowedSlippage,\n  parsedAmounts,\n  liquidityErrorMessage,\n  onAdd,\n  poolTokenPercentage,\n  liquidityMinted,\n  pair,\n  zapInEstimated,\n  rebalancing,\n  zapMode,\n  toggleZapMode,\n}) => {\n  const { t } = useTranslation()\n  const { chainId } = useActiveWeb3React()\n\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\n  const swapInCurrencyAmount = parsedAmounts[zapSwapTokenField]\n  const swapOutCurrencyAmount = parsedAmounts[zapSwapOutTokenField]\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    swapInCurrencyAmount && !swapOutCurrencyAmount\n      ? t('There is no %token1% input. Half of %token0% input is converted into %token1% to add liquidity.', {\n          token0: currencies[zapSwapTokenField]?.symbol,\n          token1: currencies[zapSwapOutTokenField]?.symbol,\n        })\n      : t('There is not enough %token1% input to match 50/50. Some of %token0% will be converted to %token1%', {\n          token0: currencies[zapSwapTokenField]?.symbol,\n          token1: currencies[zapSwapOutTokenField]?.symbol,\n        }),\n    {\n      placement: 'auto-start',\n    },\n  )\n\n  const [token0Deposited, token1Deposited] =\n    !!pair &&\n    !!totalPoolTokens &&\n    !!liquidityMinted &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalPoolTokens.quotient, liquidityMinted.quotient)\n      ? [\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, liquidityMinted, false),\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, liquidityMinted, false),\n        ]\n      : [undefined, undefined]\n\n  const swapInTokenAmount = useMemo(\n    () =>\n      zapInEstimated &&\n      CurrencyAmount.fromRawAmount(\n        wrappedCurrency(currencies[zapSwapTokenField], chainId),\n        zapInEstimated.swapAmountIn.toString(),\n      ),\n    [chainId, currencies, zapInEstimated, zapSwapTokenField],\n  )\n\n  const swapOutTokenAmount = useMemo(\n    () =>\n      zapInEstimated?.swapAmountOut &&\n      CurrencyAmount.fromRawAmount(\n        wrappedCurrency(currencies[zapSwapOutTokenField], chainId),\n        zapInEstimated.swapAmountOut.toString(),\n      ),\n    [chainId, currencies, zapInEstimated?.swapAmountOut, zapSwapOutTokenField],\n  )\n\n  const inputPercent = useMemo(() => {\n    return swapInCurrencyAmount && swapOutCurrencyAmount\n      ? clamp(\n          // TODO: avoid use number\n          +swapInCurrencyAmount.toExact() /\n            +swapOutCurrencyAmount.toExact() /\n            (+pair.priceOf(swapOutCurrencyAmount.currency.wrapped).toSignificant() +\n              +swapInCurrencyAmount.toExact() / +swapOutCurrencyAmount.toExact()),\n          0.05,\n          0.95,\n        )\n      : swapInCurrencyAmount && !swapOutCurrencyAmount\n      ? 1\n      : undefined\n  }, [pair, swapInCurrencyAmount, swapOutCurrencyAmount])\n\n  const tokenDeposited = useMemo(\n    () => ({\n      [zapSwapTokenField]:\n        swapInTokenAmount?.currency && pair?.token0\n          ? pair.token0.equals(swapInTokenAmount.currency)\n            ? token0Deposited\n            : token1Deposited\n          : undefined,\n      [zapSwapOutTokenField]:\n        swapOutTokenAmount?.currency && pair?.token1\n          ? pair.token1.equals(swapOutTokenAmount.currency)\n            ? token1Deposited\n            : token0Deposited\n          : undefined,\n    }),\n    [\n      pair.token0,\n      pair.token1,\n      swapInTokenAmount?.currency,\n      swapOutTokenAmount?.currency,\n      token0Deposited,\n      token1Deposited,\n      zapSwapOutTokenField,\n      zapSwapTokenField,\n    ],\n  )\n\n  const modalHeader = useCallback(() => {\n    return (\n      <AddLiquidityModalHeader\n        allowedSlippage={allowedSlippage}\n        currencies={currencies}\n        liquidityMinted={liquidityMinted}\n        poolTokenPercentage={poolTokenPercentage}\n        price={price}\n      >\n        <PairDistribution\n          title={t('Input')}\n          percent={inputPercent}\n          currencyA={swapInCurrencyAmount ? currencies[zapSwapTokenField] : undefined}\n          currencyAValue={swapInCurrencyAmount?.toSignificant(6)}\n          currencyB={swapOutCurrencyAmount ? currencies[zapSwapOutTokenField] : undefined}\n          currencyBValue={swapOutCurrencyAmount?.toSignificant(6)}\n        />\n        {swapOutTokenAmount && swapInTokenAmount && currencies[zapSwapTokenField] && currencies[zapSwapOutTokenField] && (\n          <AutoColumn justify=\"center\" gap=\"16px\">\n            <ArrowDownIcon color=\"textSubtle\" />\n            <AutoRow gap=\"6px\" justify=\"center\">\n              <RowFixed gap=\"2px\">\n                <Text>{swapInTokenAmount?.toSignificant(6)}</Text>\n                <CurrencyLogo currency={currencies[zapSwapTokenField]} />\n                <Text>{currencies[zapSwapTokenField].symbol}</Text>\n              </RowFixed>\n              <Text>{t('to')}</Text>\n              <RowFixed gap=\"2px\">\n                <Text>{swapOutTokenAmount?.toSignificant(6)}</Text>\n                <CurrencyLogo currency={currencies[zapSwapOutTokenField]} />\n                <Text>{currencies[zapSwapOutTokenField].symbol}</Text>\n              </RowFixed>\n            </AutoRow>\n            <ArrowDownIcon color=\"textSubtle\" />\n          </AutoColumn>\n        )}\n        <AutoColumn gap=\"4px\">\n          {tooltipVisible && tooltip}\n          <PairDistribution\n            tooltipTargetRef={targetRef}\n            title={t('Pooled')}\n            percent={0.5}\n            currencyA={currencies[zapSwapTokenField]}\n            currencyAValue={tokenDeposited?.[zapSwapTokenField]?.toSignificant(6)}\n            currencyB={currencies[zapSwapOutTokenField]}\n            currencyBValue={tokenDeposited?.[zapSwapOutTokenField]?.toSignificant(6)}\n          />\n        </AutoColumn>\n      </AddLiquidityModalHeader>\n    )\n  }, [\n    allowedSlippage,\n    currencies,\n    liquidityMinted,\n    poolTokenPercentage,\n    price,\n    t,\n    inputPercent,\n    swapInCurrencyAmount,\n    zapSwapTokenField,\n    swapOutCurrencyAmount,\n    zapSwapOutTokenField,\n    swapOutTokenAmount,\n    swapInTokenAmount,\n    tooltip,\n    tooltipVisible,\n    targetRef,\n    tokenDeposited,\n  ])\n\n  const modalBottom = useCallback(() => {\n    return (\n      <Button width=\"100%\" onClick={onAdd} mt=\"20px\">\n        {t('Confirm Supply')}\n      </Button>\n    )\n  }, [onAdd, t])\n\n  const confirmationContent = useCallback(\n    () =>\n      liquidityErrorMessage ? (\n        <>\n          <ZapErrorMessages\n            isSingleToken={!rebalancing}\n            zapMode={zapMode}\n            toggleZapMode={toggleZapMode}\n            onModalDismiss={onDismiss}\n          />\n          <TransactionErrorContent onDismiss={onDismiss} message={liquidityErrorMessage} />\n        </>\n      ) : (\n        <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />\n      ),\n    [liquidityErrorMessage, rebalancing, zapMode, toggleZapMode, onDismiss, modalHeader, modalBottom],\n  )\n\n  return (\n    <TransactionConfirmationModal\n      minWidth={['100%', , '420px']}\n      title={title}\n      onDismiss={onDismiss}\n      customOnDismiss={customOnDismiss}\n      attemptingTxn={attemptingTxn}\n      currencyToAdd={pair?.liquidityToken}\n      hash={hash}\n      content={confirmationContent}\n      pendingText={pendingText}\n    />\n  )\n}\n\nexport default ConfirmZapInModal\n","import styled from 'styled-components'\nimport { ArrowDropDownIcon, Box, Button, Text, useModal, Flex, BoxProps } from '@pancakeswap/uikit'\nimport CurrencySearchModal, { CurrencySearchModalProps } from 'components/SearchModal/CurrencySearchModal'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatNumber } from 'utils/formatBalance'\nimport { useCurrencyBalance } from 'state/wallet/hooks'\nimport useBUSDPrice from 'hooks/useBUSDPrice'\nimport { CurrencyLogo } from '../Logo'\nimport { RowBetween, AutoRow } from '../Layout/Row'\n\nconst DropDownHeader = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0px 16px;\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 16px;\n  background: ${({ theme }) => theme.colors.input};\n  transition: border-radius 0.15s;\n`\n\nconst DropDownContainer = styled(Button)`\n  cursor: pointer;\n  width: 100%;\n  position: relative;\n  background: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  height: 40px;\n  min-width: 136px;\n  user-select: none;\n  z-index: 20;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n\n  .down-icon {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\n\ninterface CurrencySelectProps extends CurrencySearchModalProps, BoxProps {\n  hideBalance?: boolean\n}\n\nexport const CurrencySelect = ({\n  onCurrencySelect,\n  selectedCurrency,\n  otherSelectedCurrency,\n  showCommonBases,\n  commonBasesType,\n  hideBalance,\n  ...props\n}: CurrencySelectProps) => {\n  const { account } = useActiveWeb3React()\n\n  const selectedCurrencyBalance = useCurrencyBalance(\n    account ?? undefined,\n    !hideBalance && selectedCurrency ? selectedCurrency : undefined,\n  )\n\n  const { t } = useTranslation()\n\n  const [onPresentCurrencyModal] = useModal(\n    <CurrencySearchModal\n      onCurrencySelect={onCurrencySelect}\n      selectedCurrency={selectedCurrency}\n      otherSelectedCurrency={otherSelectedCurrency}\n      showCommonBases={showCommonBases}\n      commonBasesType={commonBasesType}\n    />,\n  )\n\n  const price = useBUSDPrice(selectedCurrencyBalance && selectedCurrency ? selectedCurrency : undefined)\n  const quoted = selectedCurrencyBalance && price?.quote(selectedCurrencyBalance)\n\n  return (\n    <Box width=\"100%\" {...props}>\n      <DropDownContainer p={0} onClick={onPresentCurrencyModal}>\n        <DropDownHeader>\n          <Text id=\"pair\" color={!selectedCurrency ? 'text' : undefined}>\n            {!selectedCurrency ? (\n              <>{t('Select')}</>\n            ) : (\n              <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                <CurrencyLogo currency={selectedCurrency} size=\"24px\" style={{ marginRight: '8px' }} />\n                <Text id=\"pair\" bold>\n                  {selectedCurrency && selectedCurrency.symbol && selectedCurrency.symbol.length > 20\n                    ? `${selectedCurrency.symbol.slice(0, 4)}...${selectedCurrency.symbol.slice(\n                        selectedCurrency.symbol.length - 5,\n                        selectedCurrency.symbol.length,\n                      )}`\n                    : selectedCurrency?.symbol}\n                </Text>\n              </Flex>\n            )}\n          </Text>\n        </DropDownHeader>\n        <ArrowDropDownIcon color=\"text\" className=\"down-icon\" />\n      </DropDownContainer>\n      {account && !!selectedCurrency && !hideBalance && (\n        <Box>\n          <AutoRow justify=\"space-between\" gap=\"2px\">\n            <Text color=\"textSubtle\" fontSize=\"12px\">\n              {t('Balance')}:\n            </Text>\n            <Text fontSize=\"12px\">{selectedCurrencyBalance?.toSignificant(6) ?? t('Loading')}</Text>\n          </AutoRow>\n          <RowBetween>\n            <div />\n            {Number.isFinite(+quoted?.toExact()) && (\n              <Text fontSize=\"12px\" color=\"textSubtle\">\n                ~${formatNumber(+quoted.toExact())}\n              </Text>\n            )}\n          </RowBetween>\n        </Box>\n      )}\n    </Box>\n  )\n}\n","import { Currency } from '@pancakeswap/sdk'\nimport useNativeCurrency from 'hooks/useNativeCurrency'\nimport { useRouter } from 'next/router'\nimport { useCallback } from 'react'\nimport currencyId from 'utils/currencyId'\n\nexport const useCurrencySelectRoute = () => {\n  const native = useNativeCurrency()\n  const router = useRouter()\n  const [currencyIdA, currencyIdB] = router.query.currency || []\n\n  const handleCurrencyASelect = useCallback(\n    (currencyA_: Currency) => {\n      const newCurrencyIdA = currencyId(currencyA_)\n      if (newCurrencyIdA === currencyIdB) {\n        router.replace(`/add/${currencyIdB}/${currencyIdA}`, undefined, { shallow: true })\n      } else if (currencyIdB) {\n        router.replace(`/add/${newCurrencyIdA}/${currencyIdB}`, undefined, { shallow: true })\n      } else {\n        router.replace(`/add/${newCurrencyIdA}`, undefined, { shallow: true })\n      }\n    },\n    [currencyIdB, router, currencyIdA],\n  )\n  const handleCurrencyBSelect = useCallback(\n    (currencyB_: Currency) => {\n      const newCurrencyIdB = currencyId(currencyB_)\n      if (currencyIdA === newCurrencyIdB) {\n        if (currencyIdB) {\n          router.replace(`/add/${currencyIdB}/${newCurrencyIdB}`, undefined, { shallow: true })\n        } else {\n          router.replace(`/add/${newCurrencyIdB}`, undefined, { shallow: true })\n        }\n      } else {\n        router.replace(`/add/${currencyIdA || native.symbol}/${newCurrencyIdB}`, undefined, { shallow: true })\n      }\n    },\n    [currencyIdA, router, currencyIdB, native],\n  )\n\n  return {\n    handleCurrencyASelect,\n    handleCurrencyBSelect,\n  }\n}\n","import { Currency } from '@pancakeswap/sdk'\nimport { Box, Text, AddIcon, CardBody, CardFooter, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { CommitButton } from 'components/CommitButton'\nimport { CurrencySelect } from 'components/CurrencySelect'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { FlexGap } from 'components/Layout/Flex'\nimport { useLPApr } from 'state/swap/hooks'\nimport { RowBetween } from 'components/Layout/Row'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { usePair } from 'hooks/usePairs'\nimport { formatAmount } from 'utils/formatInfoNumbers'\nimport { AppHeader } from '../../components/App'\nimport { useCurrencySelectRoute } from './useCurrencySelectRoute'\nimport { CommonBasesType } from '../../components/SearchModal/types'\n\nexport function ChoosePair({\n  currencyA,\n  currencyB,\n  error,\n  onNext,\n}: {\n  currencyA?: Currency\n  currencyB?: Currency\n  error?: string\n  onNext?: () => void\n}) {\n  const { t } = useTranslation()\n  const { account } = useActiveWeb3React()\n  const isValid = !error\n  const { handleCurrencyASelect, handleCurrencyBSelect } = useCurrencySelectRoute()\n  const [, pair] = usePair(currencyA, currencyB)\n  const poolData = useLPApr(pair)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(`Based on last 7 days' performance. Does not account for impermanent loss`),\n    {\n      placement: 'bottom',\n    },\n  )\n\n  return (\n    <>\n      <AppHeader\n        title={t('Add Liquidity')}\n        subtitle={t('Receive LP tokens')}\n        helper={t(\n          'Liquidity providers.',\n        )}\n        backTo=\"/liquidity\"\n      />\n      <CardBody>\n        <Box>\n          <Text textTransform=\"uppercase\" color=\"secondary\" bold small pb=\"24px\">\n            {t('Choose a valid pair')}\n          </Text>\n          <FlexGap gap=\"4px\">\n            <CurrencySelect\n              id=\"add-liquidity-select-tokena\"\n              selectedCurrency={currencyA}\n              onCurrencySelect={handleCurrencyASelect}\n              showCommonBases\n              commonBasesType={CommonBasesType.LIQUIDITY}\n            />\n            <AddIcon color=\"textSubtle\" />\n            <CurrencySelect\n              id=\"add-liquidity-select-tokenb\"\n              selectedCurrency={currencyB}\n              onCurrencySelect={handleCurrencyBSelect}\n              showCommonBases\n              commonBasesType={CommonBasesType.LIQUIDITY}\n            />\n          </FlexGap>\n          {pair && poolData && (\n            <RowBetween mt=\"24px\">\n              <TooltipText ref={targetRef} bold fontSize=\"12px\" color=\"secondary\">\n                {t('LP reward APR')}\n              </TooltipText>\n              {tooltipVisible && tooltip}\n              <Text bold color=\"primary\">\n                {formatAmount(poolData.lpApr7d)}%\n              </Text>\n            </RowBetween>\n          )}\n        </Box>\n      </CardBody>\n      <CardFooter>\n        {!account ? (\n          <ConnectWalletButton width=\"100%\" />\n        ) : (\n          <CommitButton\n            data-test=\"choose-pair-next\"\n            width=\"100%\"\n            variant={!isValid ? 'danger' : 'primary'}\n            onClick={onNext}\n            disabled={!isValid}\n          >\n            {error ?? t('Add Liquidity')}\n          </CommitButton>\n        )}\n      </CardFooter>\n    </>\n  )\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { JSBI, CurrencyAmount, Token, WNATIVE, MINIMUM_LIQUIDITY } from '@pancakeswap/sdk'\nimport {\n  Button,\n  Text,\n  AddIcon,\n  CardBody,\n  Message,\n  useModal,\n  TooltipText,\n  useTooltip,\n  MessageText,\n} from '@pancakeswap/uikit'\nimport { logError } from 'utils/sentry'\nimport { useIsTransactionUnsupported, useIsTransactionWarning } from 'hooks/Trades'\nimport { useTranslation } from 'contexts/Localization'\nimport UnsupportedCurrencyFooter from 'components/UnsupportedCurrencyFooter'\nimport { useZapContract } from 'hooks/useContract'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getZapAddress } from 'utils/addressHelpers'\nimport { CommitButton } from 'components/CommitButton'\nimport { getLPSymbol } from 'utils/getLpSymbol'\nimport { useRouter } from 'next/router'\nimport { callWithEstimateGas } from 'utils/calls'\nimport { SUPPORT_ZAP } from 'config/constants/supportChains'\nimport { ContractMethodName } from 'utils/types'\nimport { transactionErrorToUserReadableMessage } from 'utils/transactionErrorToUserReadableMessage'\nimport { useLPApr } from 'state/swap/hooks'\nimport { ROUTER_ADDRESS } from 'config/constants/exchange'\nimport { LightCard } from '../../components/Card'\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport { AppHeader, AppBody } from '../../components/App'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport { RowBetween, RowFixed } from '../../components/Layout/Row'\nimport ConnectWalletButton from '../../components/ConnectWalletButton'\n\nimport { PairState } from '../../hooks/usePairs'\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback'\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\nimport { Field } from '../../state/mint/actions'\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState, useZapIn } from '../../state/mint/hooks'\n\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport {\n  useGasPrice,\n  useIsExpertMode,\n  usePairAdder,\n  useUserSlippageTolerance,\n  useZapModeManager,\n} from '../../state/user/hooks'\nimport { calculateGasMargin } from '../../utils'\nimport { calculateSlippageAmount, useRouterContract } from '../../utils/exchange'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\nimport Dots from '../../components/Loader/Dots'\nimport PoolPriceBar from './PoolPriceBar'\nimport Page from '../Page'\nimport ConfirmAddLiquidityModal from './components/ConfirmAddLiquidityModal'\nimport ConfirmZapInModal from './components/ConfirmZapInModal'\nimport { ChoosePair } from './ChoosePair'\nimport { ZapCheckbox } from '../../components/CurrencyInputPanel/ZapCheckbox'\nimport { formatAmount } from '../../utils/formatInfoNumbers'\nimport { useCurrencySelectRoute } from './useCurrencySelectRoute'\nimport { CommonBasesType } from '../../components/SearchModal/types'\n\nenum Steps {\n  Choose,\n  Add,\n}\n\nconst zapAddress = getZapAddress()\n\nexport default function AddLiquidity({ currencyA, currencyB }) {\n  const router = useRouter()\n  const { account, chainId, isWrongNetwork } = useActiveWeb3React()\n\n  const addPair = usePairAdder()\n  const [zapMode] = useZapModeManager()\n  const expertMode = useIsExpertMode()\n\n  const [temporarilyZapMode, setTemporarilyZapMode] = useState(true)\n\n  const [steps, setSteps] = useState(Steps.Choose)\n\n  const { t } = useTranslation()\n  const gasPrice = useGasPrice()\n\n  useEffect(() => {\n    if (router.query.step === '1') {\n      setSteps(Steps.Add)\n    }\n  }, [router.query])\n\n  const zapModeStatus = useMemo(() => !!zapMode && temporarilyZapMode, [zapMode, temporarilyZapMode])\n\n  // mint state\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n  const {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts: mintParsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n    addError,\n  } = useDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined)\n\n  const poolData = useLPApr(pair)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(`Based on last 7 days' performance. Does not account for impermanent loss`),\n    {\n      placement: 'bottom',\n    },\n  )\n\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(noLiquidity)\n\n  // modal and loading\n  const [{ attemptingTxn, liquidityErrorMessage, txHash }, setLiquidityState] = useState<{\n    attemptingTxn: boolean\n    liquidityErrorMessage: string | undefined\n    txHash: string | undefined\n  }>({\n    attemptingTxn: false,\n    liquidityErrorMessage: undefined,\n    txHash: undefined,\n  })\n\n  // Zap state\n  const [zapTokenToggleA, setZapTokenToggleA] = useState(true)\n  const [zapTokenToggleB, setZapTokenToggleB] = useState(true)\n  const zapTokenCheckedA = zapTokenToggleA && currencyBalances?.[Field.CURRENCY_A]?.greaterThan(0)\n  const zapTokenCheckedB = zapTokenToggleB && currencyBalances?.[Field.CURRENCY_B]?.greaterThan(0)\n\n  // txn values\n  const deadline = useTransactionDeadline() // custom from users settings\n  const [allowedSlippage] = useUserSlippageTolerance() // custom from users\n\n  // get the max amounts user can add\n  const maxAmounts: { [field in Field]?: CurrencyAmount<Token> } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmountSpend(currencyBalances[field]),\n      }\n    },\n    {},\n  )\n\n  const canZap = useMemo(\n    () =>\n      !!zapModeStatus &&\n      !noLiquidity &&\n      SUPPORT_ZAP.includes(chainId) &&\n      !(\n        (pair && JSBI.lessThan(pair.reserve0.quotient, MINIMUM_LIQUIDITY)) ||\n        (pair && JSBI.lessThan(pair.reserve1.quotient, MINIMUM_LIQUIDITY))\n      ),\n    [chainId, noLiquidity, pair, zapModeStatus],\n  )\n\n  const { handleCurrencyASelect, handleCurrencyBSelect } = useCurrencySelectRoute()\n\n  const { zapInEstimating, rebalancing, ...zapIn } = useZapIn({\n    pair,\n    canZap,\n    currencyA,\n    currencyB,\n    currencyBalances,\n    zapTokenCheckedA,\n    zapTokenCheckedB,\n    maxAmounts,\n  })\n\n  const parsedAmounts = canZap ? zapIn.parsedAmounts : mintParsedAmounts\n\n  const preferZapInstead = canZap && !zapIn.noNeedZap\n\n  // get formatted amounts\n  const formattedAmounts = useMemo(\n    () => ({\n      [independentField]:\n        canZap &&\n        ((independentField === Field.CURRENCY_A && !zapTokenCheckedA) ||\n          (independentField === Field.CURRENCY_B && !zapTokenCheckedB))\n          ? ''\n          : typedValue,\n      [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\n    }),\n    [\n      canZap,\n      dependentField,\n      independentField,\n      noLiquidity,\n      otherTypedValue,\n      parsedAmounts,\n      typedValue,\n      zapTokenCheckedA,\n      zapTokenCheckedB,\n    ],\n  )\n\n  const atMaxAmounts: { [field in Field]?: CurrencyAmount<Token> } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0'),\n      }\n    },\n    {},\n  )\n\n  // check whether the user has approved the router on the tokens\n  const [approvalA, approveACallback] = useApproveCallback(\n    parsedAmounts[Field.CURRENCY_A],\n    preferZapInstead ? zapAddress : ROUTER_ADDRESS[chainId],\n  )\n  const [approvalB, approveBCallback] = useApproveCallback(\n    parsedAmounts[Field.CURRENCY_B],\n    preferZapInstead ? zapAddress : ROUTER_ADDRESS[chainId],\n  )\n\n  const addTransaction = useTransactionAdder()\n\n  const routerContract = useRouterContract()\n\n  async function onAdd() {\n    if (!chainId || !account || !routerContract) return\n\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = mintParsedAmounts\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB || !deadline) {\n      return\n    }\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0],\n    }\n\n    let estimate\n    let method: (...args: any) => Promise<TransactionResponse>\n    let args: Array<string | string[] | number>\n    let value: BigNumber | null\n    if (currencyA?.isNative || currencyB?.isNative) {\n      const tokenBIsNative = currencyB?.isNative\n      estimate = routerContract.estimateGas.addLiquidityETH\n      method = routerContract.addLiquidityETH\n      args = [\n        (tokenBIsNative ? currencyA : currencyB)?.wrapped?.address ?? '', // token\n        (tokenBIsNative ? parsedAmountA : parsedAmountB).quotient.toString(), // token desired\n        amountsMin[tokenBIsNative ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\n        amountsMin[tokenBIsNative ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\n        account,\n        deadline.toHexString(),\n      ]\n      value = BigNumber.from((tokenBIsNative ? parsedAmountB : parsedAmountA).quotient.toString())\n    } else {\n      estimate = routerContract.estimateGas.addLiquidity\n      method = routerContract.addLiquidity\n      args = [\n        currencyA?.wrapped?.address ?? '',\n        currencyB?.wrapped?.address ?? '',\n        parsedAmountA.quotient.toString(),\n        parsedAmountB.quotient.toString(),\n        amountsMin[Field.CURRENCY_A].toString(),\n        amountsMin[Field.CURRENCY_B].toString(),\n        account,\n        deadline.toHexString(),\n      ]\n      value = null\n    }\n\n    setLiquidityState({ attemptingTxn: true, liquidityErrorMessage: undefined, txHash: undefined })\n    await estimate(...args, value ? { value } : {})\n      .then((estimatedGasLimit) =>\n        method(...args, {\n          ...(value ? { value } : {}),\n          gasLimit: calculateGasMargin(estimatedGasLimit, 1),\n          gasPrice,\n        }).then((response) => {\n          setLiquidityState({ attemptingTxn: false, liquidityErrorMessage: undefined, txHash: response.hash })\n\n          const symbolA = currencies[Field.CURRENCY_A]?.symbol\n          const amountA = parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)\n          const symbolB = currencies[Field.CURRENCY_B]?.symbol\n          const amountB = parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)\n          addTransaction(response, {\n            summary: `Add ${amountA} ${symbolA} and ${amountB} ${symbolB}`,\n            translatableSummary: {\n              text: 'Add %amountA% %symbolA% and %amountB% %symbolB%',\n              data: { amountA, symbolA, amountB, symbolB },\n            },\n            type: 'add-liquidity',\n          })\n\n          if (pair) {\n            addPair(pair)\n          }\n        }),\n      )\n      .catch((err) => {\n        if (err && err.code !== 4001) {\n          logError(err)\n          console.error(`Add Liquidity failed`, err, args, value)\n        }\n        setLiquidityState({\n          attemptingTxn: false,\n          liquidityErrorMessage:\n            err && err.code !== 4001\n              ? t('Add liquidity failed: %message%', { message: transactionErrorToUserReadableMessage(err, t) })\n              : undefined,\n          txHash: undefined,\n        })\n      })\n  }\n\n  const pendingText = preferZapInstead\n    ? t('Zapping %amountA% %symbolA% and %amountB% %symbolB%', {\n        amountA: parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '0',\n        symbolA: currencies[Field.CURRENCY_A]?.symbol ?? '',\n        amountB: parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '0',\n        symbolB: currencies[Field.CURRENCY_B]?.symbol ?? '',\n      })\n    : t('Supplying %amountA% %symbolA% and %amountB% %symbolB%', {\n        amountA: parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\n        symbolA: currencies[Field.CURRENCY_A]?.symbol ?? '',\n        amountB: parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\n        symbolB: currencies[Field.CURRENCY_B]?.symbol ?? '',\n      })\n\n  const handleDismissConfirmation = useCallback(() => {\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onFieldAInput('')\n    }\n  }, [onFieldAInput, txHash])\n\n  const addIsUnsupported = useIsTransactionUnsupported(currencies?.CURRENCY_A, currencies?.CURRENCY_B)\n  const addIsWarning = useIsTransactionWarning(currencies?.CURRENCY_A, currencies?.CURRENCY_B)\n\n  const zapContract = useZapContract(true)\n\n  const [onPresentAddLiquidityModal] = useModal(\n    <ConfirmAddLiquidityModal\n      title={noLiquidity ? t('You are creating a pool') : t('You will receive')}\n      customOnDismiss={handleDismissConfirmation}\n      attemptingTxn={attemptingTxn}\n      hash={txHash}\n      pendingText={pendingText}\n      currencyToAdd={pair?.liquidityToken}\n      allowedSlippage={allowedSlippage}\n      onAdd={onAdd}\n      parsedAmounts={parsedAmounts}\n      currencies={currencies}\n      liquidityErrorMessage={liquidityErrorMessage}\n      price={price}\n      noLiquidity={noLiquidity}\n      poolTokenPercentage={poolTokenPercentage}\n      liquidityMinted={liquidityMinted}\n    />,\n    true,\n    true,\n    'addLiquidityModal',\n  )\n\n  async function onZapIn() {\n    if (!canZap || !parsedAmounts || !zapIn.zapInEstimated || !chainId || !zapContract) {\n      return\n    }\n\n    let method: ContractMethodName<typeof zapContract>\n    let args\n    let value: BigNumberish | null\n    let summary: string\n    let translatableSummary: { text: string; data?: Record<string, string | number> }\n    const minAmountOut = zapIn.zapInEstimated.swapAmountOut.mul(10000 - allowedSlippage).div(10000)\n    if (rebalancing) {\n      const maxAmountIn = zapIn.zapInEstimated.swapAmountIn.mul(10000 + allowedSlippage).div(10000)\n      const amountA = parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)\n      const symbolA = currencies[Field.CURRENCY_A]?.symbol\n      const amountB = parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)\n      const symbolB = currencies[Field.CURRENCY_B]?.symbol\n      summary = `Zap ${amountA} ${symbolA} and ${amountB} ${symbolB}`\n      translatableSummary = {\n        text: 'Zap %amountA% %symbolA% and %amountB% %symbolB%',\n        data: { amountA, symbolA, amountB, symbolB },\n      }\n      if (currencyA?.isNative || currencyB?.isNative) {\n        const tokenBIsBNB = currencyB?.isNative\n        method = 'zapInBNBRebalancing'\n        args = [\n          wrappedCurrency(currencies[tokenBIsBNB ? Field.CURRENCY_A : Field.CURRENCY_B], chainId).address, // token1\n          parsedAmounts[tokenBIsBNB ? Field.CURRENCY_A : Field.CURRENCY_B].quotient.toString(), // token1AmountIn\n          pair.liquidityToken.address, // lp\n          maxAmountIn, // tokenAmountInMax\n          minAmountOut, // tokenAmountOutMin\n          zapIn.zapInEstimated.isToken0Sold && !tokenBIsBNB, // isToken0Sold\n        ]\n        value = parsedAmounts[tokenBIsBNB ? Field.CURRENCY_B : Field.CURRENCY_A].quotient.toString()\n      } else {\n        method = 'zapInTokenRebalancing'\n        args = [\n          wrappedCurrency(currencies[Field.CURRENCY_A], chainId).address, // token0\n          wrappedCurrency(currencies[Field.CURRENCY_B], chainId).address, // token1\n          parsedAmounts[Field.CURRENCY_A].quotient.toString(), // token0AmountIn\n          parsedAmounts[Field.CURRENCY_B].quotient.toString(), // token1AmountIn\n          pair.liquidityToken.address, // lp\n          maxAmountIn, // tokenAmountInMax\n          minAmountOut, // tokenAmountOutMin\n          zapIn.zapInEstimated.isToken0Sold, // isToken0Sold\n        ]\n      }\n    } else if (currencies[zapIn.swapTokenField]?.isNative) {\n      method = 'zapInBNB'\n      args = [pair.liquidityToken.address, minAmountOut]\n      const amount = parsedAmounts[zapIn.swapTokenField]?.toSignificant(3)\n      const symbol = getLPSymbol(pair.token0.symbol, pair.token1.symbol)\n      summary = `Zap in ${amount} BNB for ${symbol}`\n      translatableSummary = {\n        text: 'Zap in %amount% BNB for %symbol%',\n        data: { amount, symbol },\n      }\n      value = parsedAmounts[zapIn.swapTokenField].quotient.toString()\n    } else {\n      method = 'zapInToken'\n      args = [\n        wrappedCurrency(currencies[zapIn.swapTokenField], chainId).address,\n        parsedAmounts[zapIn.swapTokenField].quotient.toString(),\n        pair.liquidityToken.address,\n        minAmountOut,\n      ]\n      const amount = parsedAmounts[zapIn.swapTokenField]?.toSignificant(3)\n      const { symbol } = currencies[zapIn.swapTokenField]\n      const lpSymbol = getLPSymbol(pair.token0.symbol, pair.token1.symbol)\n      summary = `Zap in ${amount} ${symbol} for ${lpSymbol}`\n      translatableSummary = {\n        text: 'Zap in %amount% %symbol% for %lpSymbol%',\n        data: { amount, symbol, lpSymbol },\n      }\n    }\n\n    setLiquidityState({ attemptingTxn: true, liquidityErrorMessage: undefined, txHash: undefined })\n\n    callWithEstimateGas(zapContract, method, args, value ? { value, gasPrice } : { gasPrice })\n      .then((response) => {\n        setLiquidityState({ attemptingTxn: false, liquidityErrorMessage: undefined, txHash: response.hash })\n\n        addTransaction(response, {\n          summary,\n          translatableSummary,\n          type: 'add-liquidity',\n        })\n\n        if (pair) {\n          addPair(pair)\n        }\n      })\n      .catch((err) => {\n        if (err && err.code !== 4001) {\n          logError(err)\n          console.error(`Add Liquidity failed`, err, args, value)\n        }\n        setLiquidityState({\n          attemptingTxn: false,\n          liquidityErrorMessage:\n            err && err.code !== 4001\n              ? t('Add liquidity failed: %message%', { message: transactionErrorToUserReadableMessage(err, t) })\n              : undefined,\n          txHash: undefined,\n        })\n      })\n  }\n\n  const [onPresentZapInModal] = useModal(\n    <ConfirmZapInModal\n      title={t('You will receive')}\n      customOnDismiss={handleDismissConfirmation}\n      attemptingTxn={attemptingTxn}\n      hash={txHash}\n      pendingText={pendingText}\n      pair={pair}\n      allowedSlippage={allowedSlippage}\n      onAdd={onZapIn}\n      parsedAmounts={parsedAmounts}\n      currencies={currencies}\n      liquidityErrorMessage={liquidityErrorMessage}\n      price={price}\n      poolTokenPercentage={zapIn.poolTokenPercentage}\n      liquidityMinted={zapIn.liquidityMinted}\n      zapSwapTokenField={zapIn.swapTokenField}\n      zapSwapOutTokenField={zapIn.swapOutTokenField}\n      zapInEstimated={zapIn.zapInEstimated}\n      rebalancing={rebalancing}\n      zapMode={zapModeStatus}\n      toggleZapMode={setTemporarilyZapMode}\n    />,\n    true,\n    true,\n    'zapInModal',\n  )\n\n  const handleEnableZap = () => {\n    if (!zapMode) {\n      setTemporarilyZapMode(!zapMode)\n    }\n  }\n\n  let isValid = !error\n  let errorText = error\n\n  if (preferZapInstead) {\n    isValid = !error && !zapIn.error\n    errorText = error ?? zapIn.error\n  } else {\n    isValid = !error && !addError\n    errorText = error ?? addError\n  }\n\n  const buttonDisabled =\n    !isValid ||\n    ((zapIn.parsedAmounts[Field.CURRENCY_A] || (!preferZapInstead && zapTokenCheckedA)) &&\n      approvalA !== ApprovalState.APPROVED) ||\n    ((zapIn.parsedAmounts[Field.CURRENCY_B] || (!preferZapInstead && zapTokenCheckedB)) &&\n      approvalB !== ApprovalState.APPROVED) ||\n    (zapIn.priceSeverity > 3 && preferZapInstead)\n\n  const showFieldAApproval =\n    (zapTokenCheckedA || !preferZapInstead) &&\n    (approvalA === ApprovalState.NOT_APPROVED || approvalA === ApprovalState.PENDING)\n  const showFieldBApproval =\n    (zapTokenCheckedB || !preferZapInstead) &&\n    (approvalB === ApprovalState.NOT_APPROVED || approvalB === ApprovalState.PENDING)\n\n  const shouldShowApprovalGroup = (showFieldAApproval || showFieldBApproval) && isValid\n\n  const oneCurrencyIsWNATIVE = Boolean(\n    chainId && ((currencyA && currencyA.equals(WNATIVE[chainId])) || (currencyB && currencyB.equals(WNATIVE[chainId]))),\n  )\n\n  const noAnyInputAmount = !parsedAmounts[Field.CURRENCY_A] && !parsedAmounts[Field.CURRENCY_B]\n\n  const showAddLiquidity =\n    (!!currencies[Field.CURRENCY_A] && !!currencies[Field.CURRENCY_B] && steps === Steps.Add) || !canZap\n\n  const showZapWarning =\n    preferZapInstead &&\n    !noAnyInputAmount &&\n    ((!rebalancing && !(!zapTokenCheckedA && !zapTokenCheckedB)) || (rebalancing && zapIn.priceSeverity > 3))\n\n  const showReduceZapTokenButton =\n    preferZapInstead && (zapIn.priceSeverity > 3 || zapIn.zapInEstimatedError) && maxAmounts[zapIn.swapTokenField]\n\n  const showRebalancingConvert =\n    !showZapWarning &&\n    !noAnyInputAmount &&\n    !showReduceZapTokenButton &&\n    preferZapInstead &&\n    zapIn.isDependentAmountGreaterThanMaxAmount &&\n    rebalancing\n\n  const showZapIsAvailable =\n    !zapMode &&\n    !showZapWarning &&\n    !noAnyInputAmount &&\n    (!zapTokenCheckedA || !zapTokenCheckedB) &&\n    !noLiquidity &&\n    !(\n      (pair && JSBI.lessThan(pair.reserve0.quotient, MINIMUM_LIQUIDITY)) ||\n      (pair && JSBI.lessThan(pair.reserve1.quotient, MINIMUM_LIQUIDITY))\n    )\n\n  return (\n    <Page>\n      <AppBody>\n        {!showAddLiquidity && (\n          <ChoosePair\n            error={error}\n            currencyA={currencies[Field.CURRENCY_A]}\n            currencyB={currencies[Field.CURRENCY_B]}\n            onNext={() => setSteps(Steps.Add)}\n          />\n        )}\n        {showAddLiquidity && (\n          <>\n            <AppHeader\n              title={\n                currencies[Field.CURRENCY_A]?.symbol && currencies[Field.CURRENCY_B]?.symbol\n                  ? `${getLPSymbol(currencies[Field.CURRENCY_A].symbol, currencies[Field.CURRENCY_B].symbol)}`\n                  : t('Add Liquidity')\n              }\n              subtitle={t('Receive LP tokens.')}\n              helper={t(\n                'Liquidity providers.',\n              )}\n              backTo={canZap ? () => setSteps(Steps.Choose) : '/liquidity'}\n            />\n            <CardBody>\n              <AutoColumn gap=\"20px\">\n                {noLiquidity && (\n                  <ColumnCenter>\n                    <Message variant=\"warning\">\n                      <div>\n                        <Text bold mb=\"8px\">\n                          {t('You are the first liquidity provider.')}\n                        </Text>\n                        <Text mb=\"8px\">{t('The ratio of tokens you add will set the price of this pool.')}</Text>\n                        <Text>{t('Once you are happy with the rate click supply to review.')}</Text>\n                      </div>\n                    </Message>\n                  </ColumnCenter>\n                )}\n                <CurrencyInputPanel\n                  disableCurrencySelect={canZap}\n                  showBUSD\n                  onInputBlur={canZap ? zapIn.onInputBlurOnce : undefined}\n                  error={zapIn.priceSeverity > 3 && zapIn.swapTokenField === Field.CURRENCY_A}\n                  disabled={canZap && !zapTokenCheckedA}\n                  beforeButton={\n                    canZap && (\n                      <ZapCheckbox\n                        disabled={currencyBalances?.[Field.CURRENCY_A]?.equalTo(0)}\n                        checked={zapTokenCheckedA}\n                        onChange={(e) => {\n                          setZapTokenToggleA(e.target.checked)\n                        }}\n                      />\n                    )\n                  }\n                  onCurrencySelect={handleCurrencyASelect}\n                  zapStyle={canZap ? 'zap' : 'noZap'}\n                  value={formattedAmounts[Field.CURRENCY_A]}\n                  onUserInput={onFieldAInput}\n                  onMax={() => {\n                    onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\n                  }}\n                  showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\n                  currency={currencies[Field.CURRENCY_A]}\n                  id=\"add-liquidity-input-tokena\"\n                  showCommonBases\n                  commonBasesType={CommonBasesType.LIQUIDITY}\n                />\n                <ColumnCenter>\n                  <AddIcon width=\"16px\" />\n                </ColumnCenter>\n                <CurrencyInputPanel\n                  showBUSD\n                  onInputBlur={canZap ? zapIn.onInputBlurOnce : undefined}\n                  disabled={canZap && !zapTokenCheckedB}\n                  error={zapIn.priceSeverity > 3 && zapIn.swapTokenField === Field.CURRENCY_B}\n                  beforeButton={\n                    canZap && (\n                      <ZapCheckbox\n                        disabled={currencyBalances?.[Field.CURRENCY_B]?.equalTo(0)}\n                        checked={zapTokenCheckedB}\n                        onChange={(e) => {\n                          setZapTokenToggleB(e.target.checked)\n                        }}\n                      />\n                    )\n                  }\n                  onCurrencySelect={handleCurrencyBSelect}\n                  disableCurrencySelect={canZap}\n                  zapStyle={canZap ? 'zap' : 'noZap'}\n                  value={formattedAmounts[Field.CURRENCY_B]}\n                  onUserInput={onFieldBInput}\n                  onMax={() => {\n                    onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\n                  }}\n                  showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\n                  currency={currencies[Field.CURRENCY_B]}\n                  id=\"add-liquidity-input-tokenb\"\n                  showCommonBases\n                  commonBasesType={CommonBasesType.LIQUIDITY}\n                />\n\n                {showZapWarning && (\n                  <Message variant={zapIn.priceSeverity > 3 ? 'danger' : 'warning'}>\n                    {zapIn.priceSeverity > 3 ? (\n                      <MessageText>\n                        {t('Price Impact Too High.')}{' '}\n                        <strong>\n                          {t('Reduce amount of %token% to maximum limit', {\n                            token: currencies[zapIn.swapTokenField]?.symbol,\n                          })}\n                        </strong>\n                      </MessageText>\n                    ) : (\n                      <MessageText>\n                        <strong>\n                          {t('No %token% input.', { token: currencies[zapIn.swapOutTokenField]?.symbol })}\n                        </strong>{' '}\n                        {t('Some of your %token0% will be converted to %token1%.', {\n                          token0: currencies[zapIn.swapTokenField]?.symbol,\n                          token1: currencies[zapIn.swapOutTokenField]?.symbol,\n                        })}\n                      </MessageText>\n                    )}\n                  </Message>\n                )}\n\n                {showReduceZapTokenButton && (\n                  <RowFixed style={{ margin: 'auto' }} onClick={() => zapIn.convertToMaxZappable()}>\n                    <Button variant=\"secondary\" scale=\"sm\">\n                      {t('Reduce %token%', { token: currencies[zapIn.swapTokenField]?.symbol })}\n                    </Button>\n                  </RowFixed>\n                )}\n\n                {showZapIsAvailable && (\n                  <Message variant=\"warning\">\n                    <MessageText>\n                      {t('Zap allows you to add liquidity with only 1 single token. Click')}\n                      <Button p=\"0 4px\" scale=\"sm\" variant=\"text\" height=\"auto\" onClick={handleEnableZap}>\n                        {t('here')}\n                      </Button>\n                      {t('to try.')}\n                    </MessageText>\n                  </Message>\n                )}\n\n                {showRebalancingConvert && (\n                  <Message variant=\"warning\">\n                    <AutoColumn>\n                      <MessageText>\n                        <strong>\n                          {t('Not enough %token%.', { token: currencies[zapIn.swapOutTokenField]?.symbol })}\n                        </strong>{' '}\n                        {zapIn.gasOverhead\n                          ? t(\n                              'Some of your %token0% will be converted to %token1% before adding liquidity, but this may cause higher gas fees.',\n                              {\n                                token0: currencies[zapIn.swapTokenField]?.symbol,\n                                token1: currencies[zapIn.swapOutTokenField]?.symbol,\n                              },\n                            )\n                          : t('Some of your %token0% will be converted to %token1%.', {\n                              token0: currencies[zapIn.swapTokenField]?.symbol,\n                              token1: currencies[zapIn.swapOutTokenField]?.symbol,\n                            })}\n                      </MessageText>\n                    </AutoColumn>\n                  </Message>\n                )}\n\n                {showRebalancingConvert && (\n                  <RowFixed\n                    style={{ margin: 'auto' }}\n                    onClick={() => {\n                      if (dependentField === Field.CURRENCY_A) {\n                        onFieldAInput(maxAmounts[dependentField]?.toExact() ?? '')\n                      } else {\n                        onFieldBInput(maxAmounts[dependentField]?.toExact() ?? '')\n                      }\n                    }}\n                  >\n                    <Button variant=\"secondary\" scale=\"sm\">\n                      {t('Don’t convert')}\n                    </Button>\n                  </RowFixed>\n                )}\n\n                {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\n                  <>\n                    <LightCard padding=\"0px\" borderRadius=\"20px\">\n                      <RowBetween padding=\"1rem\">\n                        <Text fontSize=\"14px\">\n                          {noLiquidity ? t('Initial prices and pool share') : t('Prices and pool share')}\n                        </Text>\n                      </RowBetween>{' '}\n                      <LightCard padding=\"1rem\" borderRadius=\"20px\">\n                        <PoolPriceBar\n                          currencies={currencies}\n                          poolTokenPercentage={preferZapInstead ? zapIn.poolTokenPercentage : poolTokenPercentage}\n                          noLiquidity={noLiquidity}\n                          price={price}\n                        />\n                      </LightCard>\n                    </LightCard>\n                  </>\n                )}\n\n                <RowBetween>\n                  <Text bold fontSize=\"12px\" color=\"secondary\">\n                    {t('Slippage Tolerance')}\n                  </Text>\n                  <Text bold color=\"primary\">\n                    {allowedSlippage / 100}%\n                  </Text>\n                </RowBetween>\n\n                {pair && poolData && (\n                  <RowBetween>\n                    <TooltipText ref={targetRef} bold fontSize=\"12px\" color=\"secondary\">\n                      {t('LP reward APR')}\n                    </TooltipText>\n                    {tooltipVisible && tooltip}\n                    <Text bold color=\"primary\">\n                      {formatAmount(poolData.lpApr7d)}%\n                    </Text>\n                  </RowBetween>\n                )}\n\n                {addIsUnsupported || addIsWarning ? (\n                  <Button disabled mb=\"4px\">\n                    {t('Unsupported Asset')}\n                  </Button>\n                ) : !account ? (\n                  <ConnectWalletButton />\n                ) : isWrongNetwork ? (\n                  <CommitButton />\n                ) : (\n                  <AutoColumn gap=\"md\">\n                    {shouldShowApprovalGroup && (\n                      <RowBetween style={{ gap: '8px' }}>\n                        {showFieldAApproval && (\n                          <Button\n                            onClick={approveACallback}\n                            disabled={approvalA === ApprovalState.PENDING}\n                            width=\"100%\"\n                          >\n                            {approvalA === ApprovalState.PENDING ? (\n                              <Dots>{t('Enabling %asset%', { asset: currencies[Field.CURRENCY_A]?.symbol })}</Dots>\n                            ) : (\n                              t('Enable %asset%', { asset: currencies[Field.CURRENCY_A]?.symbol })\n                            )}\n                          </Button>\n                        )}\n                        {showFieldBApproval && (\n                          <Button\n                            onClick={approveBCallback}\n                            disabled={approvalB === ApprovalState.PENDING}\n                            width=\"100%\"\n                          >\n                            {approvalB === ApprovalState.PENDING ? (\n                              <Dots>{t('Enabling %asset%', { asset: currencies[Field.CURRENCY_B]?.symbol })}</Dots>\n                            ) : (\n                              t('Enable %asset%', { asset: currencies[Field.CURRENCY_B]?.symbol })\n                            )}\n                          </Button>\n                        )}\n                      </RowBetween>\n                    )}\n                    <CommitButton\n                      isLoading={preferZapInstead && zapInEstimating}\n                      variant={!isValid || zapIn.priceSeverity > 2 ? 'danger' : 'primary'}\n                      onClick={() => {\n                        if (preferZapInstead) {\n                          setLiquidityState({\n                            attemptingTxn: false,\n                            liquidityErrorMessage: undefined,\n                            txHash: undefined,\n                          })\n                          onPresentZapInModal()\n                          return\n                        }\n                        if (expertMode) {\n                          onAdd()\n                        } else {\n                          setLiquidityState({\n                            attemptingTxn: false,\n                            liquidityErrorMessage: undefined,\n                            txHash: undefined,\n                          })\n                          onPresentAddLiquidityModal()\n                        }\n                      }}\n                      disabled={buttonDisabled}\n                    >\n                      {errorText || t('Supply')}\n                    </CommitButton>\n                  </AutoColumn>\n                )}\n              </AutoColumn>\n            </CardBody>\n          </>\n        )}\n      </AppBody>\n      {!(addIsUnsupported || addIsWarning) ? (\n        pair && !noLiquidity && pairState !== PairState.INVALID ? (\n          <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\n            <MinimalPositionCard showUnwrapped={oneCurrencyIsWNATIVE} pair={pair} />\n          </AutoColumn>\n        ) : null\n      ) : (\n        <UnsupportedCurrencyFooter currencies={[currencies.CURRENCY_A, currencies.CURRENCY_B]} />\n      )}\n    </Page>\n  )\n}\n","import { useCallback, useContext, useMemo, useState } from 'react'\nimport { CurrencyAmount, Token, WNATIVE } from '@pancakeswap/sdk'\nimport { Button, Text, AddIcon, CardBody, Message, useModal } from '@pancakeswap/uikit'\nimport { logError } from 'utils/sentry'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { CommitButton } from 'components/CommitButton'\nimport { transactionErrorToUserReadableMessage } from 'utils/transactionErrorToUserReadableMessage'\nimport { StableConfigContext } from 'views/Swap/StableSwap/hooks/useStableConfig'\nimport { LightCard } from 'components/Card'\n\nimport { AutoColumn, ColumnCenter } from '../../../components/Layout/Column'\nimport CurrencyInputPanel from '../../../components/CurrencyInputPanel'\nimport ConnectWalletButton from '../../../components/ConnectWalletButton'\n\nimport { PairState } from '../../../hooks/usePairs'\nimport { ApprovalState, useApproveCallback } from '../../../hooks/useApproveCallback'\nimport { Field } from '../../../state/mint/actions'\nimport { useMintActionHandlers, useMintState } from '../../../state/mint/hooks'\n\nimport { useTransactionAdder } from '../../../state/transactions/hooks'\nimport { useGasPrice, useIsExpertMode, useUserSlippageTolerance } from '../../../state/user/hooks'\nimport { calculateGasMargin } from '../../../utils'\nimport { calculateSlippageAmount } from '../../../utils/exchange'\nimport { maxAmountSpend } from '../../../utils/maxAmountSpend'\nimport Dots from '../../../components/Loader/Dots'\nimport PoolPriceBar from '../PoolPriceBar'\nimport Page from '../../Page'\nimport ConfirmAddLiquidityModal from '../components/ConfirmAddLiquidityModal'\nimport { useCurrencySelectRoute } from '../useCurrencySelectRoute'\nimport { CommonBasesType } from '../../../components/SearchModal/types'\nimport { AppHeader, AppBody } from '../../../components/App'\nimport { RowBetween } from '../../../components/Layout/Row'\nimport { MinimalPositionCard } from '../../../components/PositionCard'\nimport { useStableLPDerivedMintInfo } from './hooks/useStableLPDerivedMintInfo'\n\nexport default function AddStableLiquidity({ currencyA, currencyB }) {\n  const { account, chainId, isWrongNetwork } = useActiveWeb3React()\n\n  const expertMode = useIsExpertMode()\n\n  const { t } = useTranslation()\n  const gasPrice = useGasPrice()\n\n  // mint state\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n  const {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n    addError,\n  } = useStableLPDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined)\n\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(true)\n\n  // modal and loading\n  const [{ attemptingTxn, liquidityErrorMessage, txHash }, setLiquidityState] = useState<{\n    attemptingTxn: boolean\n    liquidityErrorMessage: string | undefined\n    txHash: string | undefined\n  }>({\n    attemptingTxn: false,\n    liquidityErrorMessage: undefined,\n    txHash: undefined,\n  })\n\n  // txn values\n  const [allowedSlippage] = useUserSlippageTolerance() // custom from users\n\n  // get the max amounts user can add\n  const maxAmounts: { [field in Field]?: CurrencyAmount<Token> } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmountSpend(currencyBalances[field]),\n      }\n    },\n    {},\n  )\n\n  const { handleCurrencyASelect, handleCurrencyBSelect } = useCurrencySelectRoute()\n\n  // get formatted amounts\n  const formattedAmounts = useMemo(\n    () => ({\n      [independentField]: typedValue,\n      [dependentField]: otherTypedValue,\n    }),\n    [dependentField, independentField, otherTypedValue, typedValue],\n  )\n\n  const atMaxAmounts: { [field in Field]?: CurrencyAmount<Token> } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0'),\n      }\n    },\n    {},\n  )\n\n  const { stableSwapContract, stableSwapConfig } = useContext(StableConfigContext)\n\n  // check whether the user has approved tokens for addling LPs\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], stableSwapContract?.address)\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], stableSwapContract?.address)\n\n  const addTransaction = useTransactionAdder()\n\n  async function onAdd() {\n    if (!chainId || !account || !stableSwapContract) return\n\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB) {\n      return\n    }\n\n    const lpMintedSlippage = calculateSlippageAmount(liquidityMinted, noLiquidity ? 0 : allowedSlippage)[0]\n\n    const estimate = stableSwapContract.estimateGas.add_liquidity\n    const method = stableSwapContract.add_liquidity\n\n    // Ensure the token order [token0, token1]\n    const tokenAmounts =\n      stableSwapConfig?.token0?.address === parsedAmountA?.currency?.wrapped?.address\n        ? [parsedAmountA?.quotient?.toString(), parsedAmountB?.quotient?.toString()]\n        : [parsedAmountB?.quotient?.toString(), parsedAmountA?.quotient?.toString()]\n\n    const args = [tokenAmounts, lpMintedSlippage?.toString()]\n\n    const value = null\n\n    setLiquidityState({ attemptingTxn: true, liquidityErrorMessage: undefined, txHash: undefined })\n    await estimate(...args, value ? { value } : {})\n      .then((estimatedGasLimit) =>\n        method(...args, {\n          ...(value ? { value } : {}),\n          gasLimit: calculateGasMargin(estimatedGasLimit),\n          gasPrice,\n        }).then((response) => {\n          setLiquidityState({ attemptingTxn: false, liquidityErrorMessage: undefined, txHash: response.hash })\n\n          const symbolA = currencies[Field.CURRENCY_A]?.symbol\n          const amountA = parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)\n          const symbolB = currencies[Field.CURRENCY_B]?.symbol\n          const amountB = parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)\n          addTransaction(response, {\n            summary: `Add ${amountA} ${symbolA} and ${amountB} ${symbolB}`,\n            translatableSummary: {\n              text: 'Add %amountA% %symbolA% and %amountB% %symbolB%',\n              data: { amountA, symbolA, amountB, symbolB },\n            },\n            type: 'add-liquidity',\n          })\n        }),\n      )\n      .catch((err) => {\n        if (err && err.code !== 4001) {\n          logError(err)\n          console.error(`Add Liquidity failed`, err, args, value)\n        }\n        setLiquidityState({\n          attemptingTxn: false,\n          liquidityErrorMessage:\n            err && err.code !== 4001\n              ? t('Add liquidity failed: %message%', { message: transactionErrorToUserReadableMessage(err, t) })\n              : undefined,\n          txHash: undefined,\n        })\n      })\n  }\n\n  const pendingText = t('Supplying %amountA% %symbolA% and %amountB% %symbolB%', {\n    amountA: parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\n    symbolA: currencies[Field.CURRENCY_A]?.symbol ?? '',\n    amountB: parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\n    symbolB: currencies[Field.CURRENCY_B]?.symbol ?? '',\n  })\n\n  const handleDismissConfirmation = useCallback(() => {\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onFieldAInput('')\n      onFieldBInput('')\n    }\n  }, [onFieldAInput, onFieldBInput, txHash])\n\n  const [onPresentAddLiquidityModal] = useModal(\n    <ConfirmAddLiquidityModal\n      title={noLiquidity ? t('You are creating a pool') : t('You will receive')}\n      customOnDismiss={handleDismissConfirmation}\n      attemptingTxn={attemptingTxn}\n      hash={txHash}\n      pendingText={pendingText}\n      currencyToAdd={pair?.liquidityToken}\n      allowedSlippage={allowedSlippage}\n      onAdd={onAdd}\n      parsedAmounts={parsedAmounts}\n      currencies={currencies}\n      liquidityErrorMessage={liquidityErrorMessage}\n      price={price}\n      noLiquidity={noLiquidity}\n      poolTokenPercentage={poolTokenPercentage}\n      liquidityMinted={liquidityMinted}\n      isStable\n    />,\n    true,\n    true,\n    'addLiquidityModal',\n  )\n\n  let isValid = !error\n  let errorText = error\n\n  isValid = !error && !addError\n  errorText = error ?? addError\n\n  const buttonDisabled = !isValid || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED\n\n  const showFieldAApproval = approvalA === ApprovalState.NOT_APPROVED || approvalA === ApprovalState.PENDING\n  const showFieldBApproval = approvalB === ApprovalState.NOT_APPROVED || approvalB === ApprovalState.PENDING\n\n  const shouldShowApprovalGroup = (showFieldAApproval || showFieldBApproval) && isValid\n\n  const oneCurrencyIsWNATIVE = Boolean(\n    chainId && ((currencyA && currencyA.equals(WNATIVE[chainId])) || (currencyB && currencyB.equals(WNATIVE[chainId]))),\n  )\n\n  return (\n    <Page>\n      <AppBody>\n        <>\n          <AppHeader\n            title={\n              currencies[Field.CURRENCY_A]?.symbol && currencies[Field.CURRENCY_B]?.symbol\n                ? `${currencies[Field.CURRENCY_A].symbol}-${currencies[Field.CURRENCY_B].symbol} Stable LP`\n                : t('Add Stable Liquidity')\n            }\n            backTo=\"/liquidity\"\n          />\n          <CardBody>\n            <AutoColumn gap=\"20px\">\n              {noLiquidity && (\n                <ColumnCenter>\n                  <Message variant=\"warning\">\n                    <div>\n                      <Text bold mb=\"8px\">\n                        {t('You are the first liquidity provider.')}\n                      </Text>\n                      <Text mb=\"8px\">{t('The ratio of tokens you add will set the price of this pool.')}</Text>\n                      <Text>{t('Once you are happy with the rate click supply to review.')}</Text>\n                    </div>\n                  </Message>\n                </ColumnCenter>\n              )}\n              <CurrencyInputPanel\n                showBUSD\n                onCurrencySelect={handleCurrencyASelect}\n                zapStyle=\"noZap\"\n                value={formattedAmounts[Field.CURRENCY_A]}\n                onUserInput={onFieldAInput}\n                onMax={() => {\n                  onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\n                }}\n                showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\n                currency={currencies[Field.CURRENCY_A]}\n                id=\"add-liquidity-input-tokena\"\n                showCommonBases\n                commonBasesType={CommonBasesType.LIQUIDITY}\n              />\n              <ColumnCenter>\n                <AddIcon width=\"16px\" />\n              </ColumnCenter>\n              <CurrencyInputPanel\n                showBUSD\n                onCurrencySelect={handleCurrencyBSelect}\n                zapStyle=\"noZap\"\n                value={formattedAmounts[Field.CURRENCY_B]}\n                onUserInput={onFieldBInput}\n                onMax={() => {\n                  onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\n                }}\n                showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\n                currency={currencies[Field.CURRENCY_B]}\n                id=\"add-liquidity-input-tokenb\"\n                showCommonBases\n                commonBasesType={CommonBasesType.LIQUIDITY}\n              />\n\n              {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\n                <>\n                  <LightCard padding=\"0px\" borderRadius=\"20px\">\n                    <RowBetween padding=\"1rem\">\n                      <Text fontSize=\"14px\">\n                        {noLiquidity ? t('Initial prices and pool share') : t('Prices and pool share')}\n                      </Text>\n                    </RowBetween>{' '}\n                    <LightCard padding=\"1rem\" borderRadius=\"20px\">\n                      <PoolPriceBar\n                        currencies={currencies}\n                        poolTokenPercentage={poolTokenPercentage}\n                        noLiquidity={noLiquidity}\n                        price={price}\n                      />\n                    </LightCard>\n                  </LightCard>\n                </>\n              )}\n\n              <RowBetween>\n                <Text bold fontSize=\"12px\" color=\"secondary\">\n                  {t('Slippage Tolerance')}\n                </Text>\n                <Text bold color=\"primary\">\n                  {allowedSlippage / 100}%\n                </Text>\n              </RowBetween>\n\n              {!account ? (\n                <ConnectWalletButton />\n              ) : isWrongNetwork ? (\n                <CommitButton />\n              ) : (\n                <AutoColumn gap=\"md\">\n                  {shouldShowApprovalGroup && (\n                    <RowBetween style={{ gap: '8px' }}>\n                      {showFieldAApproval && (\n                        <Button onClick={approveACallback} disabled={approvalA === ApprovalState.PENDING} width=\"100%\">\n                          {approvalA === ApprovalState.PENDING ? (\n                            <Dots>{t('Enabling %asset%', { asset: currencies[Field.CURRENCY_A]?.symbol })}</Dots>\n                          ) : (\n                            t('Enable %asset%', { asset: currencies[Field.CURRENCY_A]?.symbol })\n                          )}\n                        </Button>\n                      )}\n                      {showFieldBApproval && (\n                        <Button onClick={approveBCallback} disabled={approvalB === ApprovalState.PENDING} width=\"100%\">\n                          {approvalB === ApprovalState.PENDING ? (\n                            <Dots>{t('Enabling %asset%', { asset: currencies[Field.CURRENCY_B]?.symbol })}</Dots>\n                          ) : (\n                            t('Enable %asset%', { asset: currencies[Field.CURRENCY_B]?.symbol })\n                          )}\n                        </Button>\n                      )}\n                    </RowBetween>\n                  )}\n                  <CommitButton\n                    variant={!isValid ? 'danger' : 'primary'}\n                    onClick={() => {\n                      if (expertMode) {\n                        onAdd()\n                      } else {\n                        setLiquidityState({\n                          attemptingTxn: false,\n                          liquidityErrorMessage: undefined,\n                          txHash: undefined,\n                        })\n                        onPresentAddLiquidityModal()\n                      }\n                    }}\n                    disabled={buttonDisabled}\n                  >\n                    {errorText || t('Supply')}\n                  </CommitButton>\n                </AutoColumn>\n              )}\n            </AutoColumn>\n          </CardBody>\n        </>\n      </AppBody>\n      {pair && !noLiquidity && pairState !== PairState.INVALID ? (\n        <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\n          <MinimalPositionCard showUnwrapped={oneCurrencyIsWNATIVE} pair={pair} />\n        </AutoColumn>\n      ) : null}\n    </Page>\n  )\n}\n","import { CAKE, USDC } from '@pancakeswap/tokens'\nimport { useCurrency } from 'hooks/Tokens'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport useNativeCurrency from 'hooks/useNativeCurrency'\nimport { GetStaticPaths, GetStaticProps } from 'next'\nimport { useRouter } from 'next/router'\nimport { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { resetMintState } from 'state/mint/actions'\nimport { CHAIN_IDS } from 'utils/wagmi'\nimport AddLiquidity from 'views/AddLiquidity'\nimport AddStableLiquidity from 'views/AddLiquidity/AddStableLiquidity/index'\nimport useStableConfig, { StableConfigContext } from 'views/Swap/StableSwap/hooks/useStableConfig'\n\nconst AddLiquidityPage = () => {\n  const router = useRouter()\n  const { chainId } = useActiveWeb3React()\n  const dispatch = useAppDispatch()\n\n  const native = useNativeCurrency()\n\n  const [currencyIdA, currencyIdB] = router.query.currency || [\n    native.symbol,\n    CAKE[chainId]?.address ?? USDC[chainId]?.address,\n  ]\n\n  const currencyA = useCurrency(currencyIdA)\n  const currencyB = useCurrency(currencyIdB)\n\n  const { stableSwapConfig, ...stableConfig } = useStableConfig({\n    tokenA: currencyA,\n    tokenB: currencyB,\n  })\n\n  useEffect(() => {\n    if (!currencyIdA && !currencyIdB) {\n      dispatch(resetMintState())\n    }\n  }, [dispatch, currencyIdA, currencyIdB])\n\n  return stableSwapConfig ? (\n    <StableConfigContext.Provider value={{ stableSwapConfig, ...stableConfig }}>\n      <AddStableLiquidity currencyA={currencyA} currencyB={currencyB} />\n    </StableConfigContext.Provider>\n  ) : (\n    <AddLiquidity currencyA={currencyA} currencyB={currencyB} />\n  )\n}\n\nAddLiquidityPage.chains = CHAIN_IDS\n\nexport default AddLiquidityPage\n\nconst OLD_PATH_STRUCTURE = /^(0x[a-fA-F0-9]{40}|BNB)-(0x[a-fA-F0-9]{40}|BNB)$/\n\nexport const getStaticPaths: GetStaticPaths = () => {\n  return {\n    paths: [{ params: { currency: [] } }],\n    fallback: true,\n  }\n}\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  const { currency = [] } = params\n  const [currencyIdA, currencyIdB] = currency\n  const match = currencyIdA?.match(OLD_PATH_STRUCTURE)\n\n  if (match?.length) {\n    return {\n      redirect: {\n        statusCode: 301,\n        destination: `/add/${match[1]}/${match[2]}`,\n      },\n    }\n  }\n\n  if (currencyIdA && currencyIdB && currencyIdA.toLowerCase() === currencyIdB.toLowerCase()) {\n    return {\n      redirect: {\n        statusCode: 303,\n        destination: `/add/${currencyIdA}`,\n      },\n    }\n  }\n\n  return {\n    props: {},\n  }\n}\n","import { Currency, CurrencyAmount, JSBI } from '@pancakeswap/sdk'\nimport { BIG_INT_ZERO, MIN_BNB } from 'config/constants/exchange'\n\n/**\n * Given some token amount, return the max that can be spent of it\n * @param currencyAmount to return max of\n */\nexport function maxAmountSpend(currencyAmount?: CurrencyAmount<Currency>): CurrencyAmount<Currency> | undefined {\n  if (!currencyAmount) return undefined\n  if (currencyAmount.currency?.isNative) {\n    if (JSBI.greaterThan(currencyAmount.quotient, MIN_BNB)) {\n      return CurrencyAmount.fromRawAmount(currencyAmount.currency, JSBI.subtract(currencyAmount.quotient, MIN_BNB))\n    }\n    return CurrencyAmount.fromRawAmount(currencyAmount.currency, BIG_INT_ZERO)\n  }\n  return currencyAmount\n}\n"],"names":["window","__NEXT_P","push","_templateObject","data","_tagged_template_literal","CardFooter","styled","componentId","param","theme","colors","cardBorder","space","defaultProps","p","props","_jsx","Svg","_object_spread_props","_object_spread","viewBox","children","d","DetailsFooter","text","invertedContrast","UnsupportedModal","currencies","onDismiss","useActiveWeb3React","chainId","useTranslation","t","tokens","map","currency","wrappedCurrency","unsupportedTokens","useUnsupportedTokens","Modal","title","AutoColumn","gap","token","Object","keys","includes","address","AutoRow","align","CurrencyLogo","size","Text","symbol","Link","external","small","color","href","getBlockExploreLink","concat","UnsupportedCurrencyFooter","onPresentModal","useModal","Button","variant","onClick","price","poolTokenPercentage","noLiquidity","justify","toSignificant","fontSize","pt","assetA","Field","assetB","invert","lessThan","ONE_BIPS","toFixed","Dot","Box","CircleSvg","percent","width","height","fill","xmlns","g","filter","circle","r","cx","cy","stroke","strokeWidth","strokeDasharray","transform","defs","id","x","y","filterUnits","colorInterpolationFilters","feFlood","floodOpacity","result","feBlend","in","in2","feColorMatrix","values","feOffset","dy","feComposite","operator","k2","k3","Subtitle","textTransform","bold","PairDistribution","currencyA","currencyB","currencyAValue","currencyBValue","tooltipTargetRef","Flex","div","ref","mr","style","RowBetween","bg","AddLiquidityModalHeader","liquidityMinted","allowedSlippage","useTooltip","slippage","placement","tooltip","tooltipVisible","targetRef","GreyCard","DoubleCurrencyLogo","currency0","currency1","getLPSymbol","ml","justifyContent","TooltipText","customOnDismiss","attemptingTxn","hash","pendingText","parsedAmounts","liquidityErrorMessage","onAdd","currencyToAdd","isStable","amountCurrencyA","_toNumber","amountCurrencyB","modalHeader","useCallback","modalBottom","mt","confirmationContent","TransactionErrorContent","message","ConfirmationModalContent","topContent","bottomContent","TransactionConfirmationModal","minWidth","content","zapSwapTokenField","zapSwapOutTokenField","pair","zapInEstimated","rebalancing","zapMode","toggleZapMode","totalPoolTokens","useTotalSupply","liquidityToken","swapInCurrencyAmount","swapOutCurrencyAmount","token0","token1","JSBI","quotient","getLiquidityValue","undefined","token0Deposited","token1Deposited","swapInTokenAmount","useMemo","CurrencyAmount","swapAmountIn","toString","swapOutTokenAmount","swapAmountOut","inputPercent","num","toExact","priceOf","wrapped","min","max","Math","tokenDeposited","equals","ArrowDownIcon","RowFixed","ZapErrorMessages","isSingleToken","onModalDismiss","DropDownHeader","shadows","inset","inputSecondary","input","DropDownContainer","mediaQueries","sm","CurrencySelect","selectedCurrencyBalance","onCurrencySelect","selectedCurrency","otherSelectedCurrency","showCommonBases","commonBasesType","hideBalance","account","useCurrencyBalance","onPresentCurrencyModal","CurrencySearchModal","useBUSDPrice","quoted","quote","alignItems","marginRight","length","slice","ArrowDropDownIcon","className","Number","isFinite","formatNumber","useCurrencySelectRoute","native","useNativeCurrency","router","useRouter","query","currencyIdA","currencyIdB","handleCurrencyASelect","currencyA_","newCurrencyIdA","currencyId","replace","shallow","handleCurrencyBSelect","currencyB_","newCurrencyIdB","ChoosePair","error","onNext","isValid","usePair","poolData","useLPApr","AppHeader","subtitle","helper","backTo","CardBody","pb","FlexGap","CommonBasesType","AddIcon","formatAmount","lpApr7d","CommitButton","data-test","disabled","ConnectWalletButton","Steps","Choose","Add","zapAddress","getZapAddress","AddLiquidity","currencyBalances","isWrongNetwork","addPair","usePairAdder","useZapModeManager","expertMode","useIsExpertMode","useState","temporarilyZapMode","setTemporarilyZapMode","steps","setSteps","gasPrice","useGasPrice","useEffect","step","zapModeStatus","useMintState","independentField","typedValue","otherTypedValue","useDerivedMintInfo","dependentField","pairState","addError","useMintActionHandlers","onFieldAInput","onFieldBInput","txHash","setLiquidityState","zapTokenToggleA","setZapTokenToggleA","zapTokenToggleB","setZapTokenToggleB","zapTokenCheckedA","greaterThan","zapTokenCheckedB","deadline","useTransactionDeadline","useUserSlippageTolerance","maxAmounts","reduce","accumulator","field","maxAmountSpend","canZap","SUPPORT_ZAP","reserve0","MINIMUM_LIQUIDITY","reserve1","useZapIn","zapInEstimating","zapIn","mintParsedAmounts","preferZapInstead","noNeedZap","formattedAmounts","atMaxAmounts","equalTo","useApproveCallback","ROUTER_ADDRESS","approvalA","approveACallback","approvalB","approveBCallback","addTransaction","useTransactionAdder","routerContract","useRouterContract","parsedAmountA","parsedAmountB","amountsMin","estimate","method","args","value","tokenBIsNative","calculateSlippageAmount","isNative","estimateGas","addLiquidityETH","toHexString","BigNumber","addLiquidity","then","estimatedGasLimit","gasLimit","calculateGasMargin","response","symbolA","amountA","symbolB","amountB","summary","translatableSummary","type","catch","err","code","logError","console","transactionErrorToUserReadableMessage","handleDismissConfirmation","addIsUnsupported","useIsTransactionUnsupported","CURRENCY_A","CURRENCY_B","addIsWarning","useIsTransactionWarning","zapContract","useZapContract","onPresentAddLiquidityModal","ConfirmAddLiquidityModal","onZapIn","minAmountOut","maxAmountIn","tokenBIsBNB","amount","lpSymbol","mul","isToken0Sold","swapTokenField","callWithEstimateGas","ConfirmZapInModal","swapOutTokenField","onPresentZapInModal","errorText","buttonDisabled","ApprovalState","priceSeverity","showFieldAApproval","showFieldBApproval","shouldShowApprovalGroup","oneCurrencyIsWNATIVE","Boolean","WNATIVE","noAnyInputAmount","showAddLiquidity","showZapWarning","showReduceZapTokenButton","zapInEstimatedError","showRebalancingConvert","isDependentAmountGreaterThanMaxAmount","showZapIsAvailable","Page","AppBody","ColumnCenter","Message","mb","CurrencyInputPanel","disableCurrencySelect","showBUSD","onInputBlur","onInputBlurOnce","beforeButton","ZapCheckbox","checked","onChange","e","target","zapStyle","onUserInput","onMax","showMaxButton","MessageText","strong","margin","convertToMaxZappable","scale","gasOverhead","PairState","LightCard","padding","borderRadius","PoolPriceBar","Dots","asset","isLoading","maxWidth","marginTop","MinimalPositionCard","showUnwrapped","AddStableLiquidity","useStableLPDerivedMintInfo","useContext","StableConfigContext","stableSwapContract","stableSwapConfig","lpMintedSlippage","tokenAmounts","add_liquidity","AddLiquidityPage","CAKE","USDC","dispatch","useAppDispatch","useCurrency","useStableConfig","tokenA","tokenB","stableConfig","resetMintState","chains","CHAIN_IDS","currencyAmount","MIN_BNB","BIG_INT_ZERO"],"sourceRoot":""}