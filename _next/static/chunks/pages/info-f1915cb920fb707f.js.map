{"version":3,"file":"static/chunks/pages/info-f1915cb920fb707f.js","mappings":"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","sources":["webpack://_N_E/?223a","webpack://_N_E/./src/views/Info/components/InfoCharts/HoverableChart.tsx","webpack://_N_E/./src/views/Info/Overview/index.tsx","webpack://_N_E/./src/pages/info/index.tsx","webpack://_N_E/./src/views/Info/components/InfoTables/PoolsTable.tsx","webpack://_N_E/./src/views/Info/components/InfoTables/TokensTable.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/info\",\n      function () {\n        return require(\"private-next-pages/info/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/info\"])\n      });\n    }\n  ","import { Box, Text, Skeleton } from '@pancakeswap/uikit'\nimport { fromUnixTime } from 'date-fns'\nimport { useState, useMemo, memo, useEffect } from 'react'\nimport { ChartEntry, ProtocolData } from 'state/info/types'\nimport { formatAmount } from 'utils/formatInfoNumbers'\nimport BarChart from './BarChart'\nimport LineChart from './LineChart'\n\ninterface HoverableChartProps {\n  chartData: ChartEntry[]\n  protocolData: ProtocolData\n  currentDate: string\n  valueProperty: string\n  title: string\n  ChartComponent: typeof BarChart | typeof LineChart\n}\n\nconst HoverableChart = ({\n  chartData,\n  protocolData,\n  currentDate,\n  valueProperty,\n  title,\n  ChartComponent,\n}: HoverableChartProps) => {\n  const [hover, setHover] = useState<number | undefined>()\n  const [dateHover, setDateHover] = useState<string | undefined>()\n\n  // Getting latest data to display on top of chart when not hovered\n  useEffect(() => {\n    if (hover == null && protocolData) {\n      setHover(protocolData[valueProperty])\n    }\n  }, [protocolData, hover, valueProperty])\n\n  const formattedData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day[valueProperty],\n        }\n      })\n    }\n    return []\n  }, [chartData, valueProperty])\n\n  return (\n    <Box p={['16px', '16px', '24px']}>\n      <Text bold color=\"secondary\">\n        {title}\n      </Text>\n      {hover > 0 ? (\n        <Text bold fontSize=\"24px\">\n          ${formatAmount(hover)}\n        </Text>\n      ) : (\n        <Skeleton width=\"128px\" height=\"36px\" />\n      )}\n      <Text>{dateHover ?? currentDate}</Text>\n      <Box height=\"250px\">\n        <ChartComponent data={formattedData} setHoverValue={setHover} setHoverDate={setDateHover} />\n      </Box>\n    </Box>\n  )\n}\n\nexport default memo(HoverableChart)\n","import { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Heading, Card } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/Layout/Page'\nimport LineChart from 'views/Info/components/InfoCharts/LineChart'\nimport TokenTable from 'views/Info/components/InfoTables/TokensTable'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport BarChart from 'views/Info/components/InfoCharts/BarChart'\nimport {\n  useAllPoolData,\n  useAllTokenData,\n  useProtocolChartData,\n  useProtocolData,\n  useProtocolTransactions,\n} from 'state/info/hooks'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\nimport HoverableChart from '../components/InfoCharts/HoverableChart'\n\nexport const ChartCardsContainer = styled(Flex)`\n  justify-content: space-between;\n  flex-direction: column;\n  width: 100%;\n  padding: 0;\n  gap: 1em;\n\n  & > * {\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  } ;\n`\n\nconst Overview: React.FC<React.PropsWithChildren> = () => {\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n\n  const [protocolData] = useProtocolData()\n  const [chartData] = useProtocolChartData()\n  const [transactions] = useProtocolTransactions()\n\n  const currentDate = useMemo(\n    () => new Date().toLocaleString(locale, { month: 'short', year: 'numeric', day: 'numeric' }),\n    [locale],\n  )\n\n  const allTokens = useAllTokenData()\n\n  const formattedTokens = useMemo(() => {\n    return Object.values(allTokens)\n      .map((token) => token.data)\n      .filter((token) => token)\n  }, [allTokens])\n\n  const allPoolData = useAllPoolData()\n  const poolDatas = useMemo(() => {\n    return Object.values(allPoolData)\n      .map((pool) => pool.data)\n      .filter((pool) => pool)\n  }, [allPoolData])\n\n  const somePoolsAreLoading = useMemo(() => {\n    return Object.values(allPoolData).some((pool) => !pool.data)\n  }, [allPoolData])\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\" id=\"info-overview-title\">\n        {t('Safemars Info & Analytics')}\n      </Heading>\n      <ChartCardsContainer>\n        <Card>\n          <HoverableChart\n            chartData={chartData}\n            protocolData={protocolData}\n            currentDate={currentDate}\n            valueProperty=\"liquidityUSD\"\n            title={t('Liquidity')}\n            ChartComponent={LineChart}\n          />\n        </Card>\n        <Card>\n          <HoverableChart\n            chartData={chartData}\n            protocolData={protocolData}\n            currentDate={currentDate}\n            valueProperty=\"volumeUSD\"\n            title={t('Volume 24H')}\n            ChartComponent={BarChart}\n          />\n        </Card>\n      </ChartCardsContainer>\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Top Tokens')}\n      </Heading>\n      <TokenTable tokenDatas={formattedTokens} />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Top Pools')}\n      </Heading>\n      <PoolTable poolDatas={poolDatas} loading={somePoolsAreLoading} />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Transactions')}\n      </Heading>\n      <TransactionTable transactions={transactions} />\n    </Page>\n  )\n}\n\nexport default Overview\n","import { InfoPageLayout } from 'views/Info'\nimport Overview from 'views/Info/Overview'\n\nconst InfoPage = () => {\n  return <Overview />\n}\n\nInfoPage.Layout = InfoPageLayout\nInfoPage.chains = [] // set all\n\nexport default InfoPage\n\n\n// import { NotFound } from '@pancakeswap/uikit'\n\n// const Pools = () => <NotFound />\n\n// export default Pools","import { useCallback, useState, useMemo, useEffect, Fragment } from 'react'\nimport styled from 'styled-components'\nimport { NextLinkFromReactRouter } from 'components/NextLink'\nimport { Text, Flex, Box, Skeleton, ArrowBackIcon, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { formatAmount } from 'utils/formatInfoNumbers'\nimport { PoolData } from 'state/info/types'\nimport { ITEMS_PER_INFO_TABLE_PAGE } from 'config/constants/info'\nimport { DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { useTranslation } from 'contexts/Localization'\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\n\n/**\n *  Columns on different layouts\n *  5 = | # | Pool | TVL | Volume 24H | Volume 7D |\n *  4 = | # | Pool |     | Volume 24H | Volume 7D |\n *  3 = | # | Pool |     | Volume 24H |           |\n *  2 = |   | Pool |     | Volume 24H |           |\n */\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n  grid-template-columns: 20px 3.5fr repeat(5, 1fr);\n\n  padding: 0 24px;\n  @media screen and (max-width: 900px) {\n    grid-template-columns: 20px 1.5fr repeat(3, 1fr);\n    & :nth-child(4),\n    & :nth-child(5) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 500px) {\n    grid-template-columns: 20px 1.5fr repeat(1, 1fr);\n    & :nth-child(4),\n    & :nth-child(5),\n    & :nth-child(6),\n    & :nth-child(7) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 480px) {\n    grid-template-columns: 2.5fr repeat(1, 1fr);\n    > *:nth-child(1) {\n      display: none;\n    }\n  }\n`\n\nconst LinkWrapper = styled(NextLinkFromReactRouter)`\n  text-decoration: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst SORT_FIELD = {\n  volumeUSD: 'volumeUSD',\n  liquidityUSD: 'liquidityUSD',\n  volumeUSDWeek: 'volumeUSDWeek',\n  lpFees24h: 'lpFees24h',\n  lpApr7d: 'lpApr7d',\n}\n\nconst LoadingRow: React.FC<React.PropsWithChildren> = () => (\n  <ResponsiveGrid>\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n  </ResponsiveGrid>\n)\n\nconst TableLoader: React.FC<React.PropsWithChildren> = () => (\n  <>\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n  </>\n)\n\nconst DataRow = ({ poolData, index }: { poolData: PoolData; index: number }) => {\n  return (\n    <LinkWrapper to={`/info/pools/${poolData.address}`}>\n      <ResponsiveGrid>\n        <Text>{index + 1}</Text>\n        <Flex>\n          <DoubleCurrencyLogo address0={poolData.token0.address} address1={poolData.token1.address} />\n          <Text ml=\"8px\">\n            {poolData.token0.symbol}/{poolData.token1.symbol}\n          </Text>\n        </Flex>\n        <Text>${formatAmount(poolData.volumeUSD)}</Text>\n        <Text>${formatAmount(poolData.volumeUSDWeek)}</Text>\n        <Text>${formatAmount(poolData.lpFees24h)}</Text>\n        <Text>{formatAmount(poolData.lpApr7d)}%</Text>\n        <Text>${formatAmount(poolData.liquidityUSD)}</Text>\n      </ResponsiveGrid>\n    </LinkWrapper>\n  )\n}\n\ninterface PoolTableProps {\n  poolDatas: PoolData[]\n  loading?: boolean // If true shows indication that SOME pools are loading, but the ones already fetched will be shown\n}\n\nconst PoolTable: React.FC<React.PropsWithChildren<PoolTableProps>> = ({ poolDatas, loading }) => {\n  // for sorting\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n  const { t } = useTranslation()\n\n  // pagination\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n  useEffect(() => {\n    let extraPages = 1\n    if (poolDatas.length % ITEMS_PER_INFO_TABLE_PAGE === 0) {\n      extraPages = 0\n    }\n    setMaxPage(Math.floor(poolDatas.length / ITEMS_PER_INFO_TABLE_PAGE) + extraPages)\n  }, [poolDatas])\n\n  const sortedPools = useMemo(() => {\n    return poolDatas\n      ? poolDatas\n          .sort((a, b) => {\n            if (a && b) {\n              return a[sortField as keyof PoolData] > b[sortField as keyof PoolData]\n                ? (sortDirection ? -1 : 1) * 1\n                : (sortDirection ? -1 : 1) * -1\n            }\n            return -1\n          })\n          .slice(ITEMS_PER_INFO_TABLE_PAGE * (page - 1), page * ITEMS_PER_INFO_TABLE_PAGE)\n      : []\n  }, [page, poolDatas, sortDirection, sortField])\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  return (\n    <TableWrapper>\n      <ResponsiveGrid>\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          #\n        </Text>\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Pool')}\n        </Text>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSDWeek)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 7D')} {arrow(SORT_FIELD.volumeUSDWeek)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpFees24h)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward fees 24H')} {arrow(SORT_FIELD.lpFees24h)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpApr7d)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward APR')} {arrow(SORT_FIELD.lpApr7d)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.liquidityUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Liquidity')} {arrow(SORT_FIELD.liquidityUSD)}\n        </ClickableColumnHeader>\n      </ResponsiveGrid>\n      <Break />\n      {sortedPools.length > 0 ? (\n        <>\n          {sortedPools.map((poolData, i) => {\n            if (poolData) {\n              return (\n                <Fragment key={poolData.address}>\n                  <DataRow index={(page - 1) * ITEMS_PER_INFO_TABLE_PAGE + i} poolData={poolData} />\n                  <Break />\n                </Fragment>\n              )\n            }\n            return null\n          })}\n          {loading && <LoadingRow />}\n          <PageButtons>\n            <Arrow\n              onClick={() => {\n                setPage(page === 1 ? page : page - 1)\n              }}\n            >\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n            </Arrow>\n\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n\n            <Arrow\n              onClick={() => {\n                setPage(page === maxPage ? page : page + 1)\n              }}\n            >\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n            </Arrow>\n          </PageButtons>\n        </>\n      ) : (\n        <>\n          <TableLoader />\n          {/* spacer */}\n          <Box />\n        </>\n      )}\n    </TableWrapper>\n  )\n}\n\nexport default PoolTable\n","import { useState, useMemo, useCallback, useEffect, Fragment } from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Box, Skeleton, ArrowBackIcon, ArrowForwardIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { TokenData } from 'state/info/types'\nimport { NextLinkFromReactRouter } from 'components/NextLink'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport { useTranslation } from 'contexts/Localization'\nimport orderBy from 'lodash/orderBy'\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\n\n/**\n *  Columns on different layouts\n *  6 = | # | Name | Price | Price Change | Volume 24H | TVL |\n *  5 = | # | Name | Price |              | Volume 24H | TVL |\n *  4 = | # | Name | Price |              | Volume 24H |     |\n *  2 = |   | Name |       |              | Volume 24H |     |\n *  On smallest screen Name is reduced to just symbol\n */\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n\n  padding: 0 24px;\n\n  grid-template-columns: 20px 3fr repeat(4, 1fr);\n\n  @media screen and (max-width: 900px) {\n    grid-template-columns: 20px 2fr repeat(3, 1fr);\n    & :nth-child(4) {\n      display: none;\n    }\n  }\n\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 20px 2fr repeat(2, 1fr);\n    & :nth-child(6) {\n      display: none;\n    }\n  }\n\n  @media screen and (max-width: 670px) {\n    grid-template-columns: 1fr 1fr;\n    > *:first-child {\n      display: none;\n    }\n    > *:nth-child(3) {\n      display: none;\n    }\n  }\n`\n\nconst LinkWrapper = styled(NextLinkFromReactRouter)`\n  text-decoration: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst ResponsiveLogo = styled(CurrencyLogo)`\n  @media screen and (max-width: 670px) {\n    width: 16px;\n    height: 16px;\n  }\n`\n\nconst TableLoader: React.FC<React.PropsWithChildren> = () => {\n  const loadingRow = (\n    <ResponsiveGrid>\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </ResponsiveGrid>\n  )\n  return (\n    <>\n      {loadingRow}\n      {loadingRow}\n      {loadingRow}\n    </>\n  )\n}\n\nconst DataRow: React.FC<React.PropsWithChildren<{ tokenData: TokenData; index: number }>> = ({ tokenData, index }) => {\n  const { isXs, isSm } = useMatchBreakpoints()\n  return (\n    <LinkWrapper to={`/info/tokens/${tokenData.address}`}>\n      <ResponsiveGrid>\n        <Flex>\n          <Text>{index + 1}</Text>\n        </Flex>\n        <Flex alignItems=\"center\">\n          <ResponsiveLogo address={tokenData.address} />\n          {(isXs || isSm) && <Text ml=\"8px\">{tokenData.symbol}</Text>}\n          {!isXs && !isSm && (\n            <Flex marginLeft=\"10px\">\n              <Text>{tokenData.name}</Text>\n              <Text ml=\"8px\">({tokenData.symbol})</Text>\n            </Flex>\n          )}\n        </Flex>\n        <Text fontWeight={400}>${formatAmount(tokenData.priceUSD, { notation: 'standard' })}</Text>\n        <Text fontWeight={400}>\n          <Percent value={tokenData.priceUSDChange} fontWeight={400} />\n        </Text>\n        <Text fontWeight={400}>${formatAmount(tokenData.volumeUSD)}</Text>\n        <Text fontWeight={400}>${formatAmount(tokenData.liquidityUSD)}</Text>\n      </ResponsiveGrid>\n    </LinkWrapper>\n  )\n}\n\nconst SORT_FIELD = {\n  name: 'name',\n  volumeUSD: 'volumeUSD',\n  liquidityUSD: 'liquidityUSD',\n  priceUSD: 'priceUSD',\n  priceUSDChange: 'priceUSDChange',\n  priceUSDChangeWeek: 'priceUSDChangeWeek',\n}\n\nconst MAX_ITEMS = 10\n\nconst TokenTable: React.FC<\n  React.PropsWithChildren<{\n    tokenDatas: TokenData[] | undefined\n    maxItems?: number\n  }>\n> = ({ tokenDatas, maxItems = MAX_ITEMS }) => {\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n\n  const { t } = useTranslation()\n\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n  useEffect(() => {\n    let extraPages = 1\n    if (tokenDatas) {\n      if (tokenDatas.length % maxItems === 0) {\n        extraPages = 0\n      }\n      setMaxPage(Math.floor(tokenDatas.length / maxItems) + extraPages)\n    }\n  }, [maxItems, tokenDatas])\n\n  const sortedTokens = useMemo(() => {\n    return tokenDatas\n      ? orderBy(\n          tokenDatas,\n          (tokenData) => tokenData[sortField as keyof TokenData],\n          sortDirection ? 'desc' : 'asc',\n        ).slice(maxItems * (page - 1), page * maxItems)\n      : []\n  }, [tokenDatas, maxItems, page, sortDirection, sortField])\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  if (!tokenDatas) {\n    return <Skeleton />\n  }\n\n  return (\n    <TableWrapper>\n      <ResponsiveGrid>\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          #\n        </Text>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.name)}\n          textTransform=\"uppercase\"\n        >\n          {t('Name')} {arrow(SORT_FIELD.name)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.priceUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Price')} {arrow(SORT_FIELD.priceUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.priceUSDChange)}\n          textTransform=\"uppercase\"\n        >\n          {t('Price 24H')} {arrow(SORT_FIELD.priceUSDChange)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.liquidityUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Liquidity')} {arrow(SORT_FIELD.liquidityUSD)}\n        </ClickableColumnHeader>\n      </ResponsiveGrid>\n\n      <Break />\n      {sortedTokens.length > 0 ? (\n        <>\n          {sortedTokens.map((data, i) => {\n            if (data) {\n              return (\n                <Fragment key={data.address}>\n                  <DataRow index={(page - 1) * MAX_ITEMS + i} tokenData={data} />\n                  <Break />\n                </Fragment>\n              )\n            }\n            return null\n          })}\n          <PageButtons>\n            <Arrow\n              onClick={() => {\n                setPage(page === 1 ? page : page - 1)\n              }}\n            >\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n            </Arrow>\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n            <Arrow\n              onClick={() => {\n                setPage(page === maxPage ? page : page + 1)\n              }}\n            >\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n            </Arrow>\n          </PageButtons>\n        </>\n      ) : (\n        <>\n          <TableLoader />\n          <Box />\n        </>\n      )}\n    </TableWrapper>\n  )\n}\n\nexport default TokenTable\n"],"names":["window","__NEXT_P","push","HoverableChart","chartData","protocolData","currentDate","valueProperty","title","ChartComponent","useState","hover","setHover","dateHover","setDateHover","useEffect","formattedData","useMemo","map","day","time","fromUnixTime","date","value","Box","p","Text","bold","color","fontSize","formatAmount","Skeleton","width","height","data","setHoverValue","setHoverDate","memo","ChartCardsContainer","styled","Flex","theme","mediaQueries","md","useTranslation","t","currentLanguage","locale","useProtocolData","useProtocolChartData","transactions","useProtocolTransactions","Date","toLocaleString","month","year","allTokens","useAllTokenData","formattedTokens","Object","values","token","filter","allPoolData","useAllPoolData","poolDatas","pool","somePoolsAreLoading","some","Page","Heading","scale","mb","id","Card","LineChart","BarChart","mt","TokenTable","tokenDatas","PoolTable","loading","TransactionTable","InfoPage","Overview","Layout","InfoPageLayout","chains","ResponsiveGrid","LinkWrapper","NextLinkFromReactRouter","SORT_FIELD","LoadingRow","TableLoader","DataRow","poolData","index","to","address","DoubleCurrencyLogo","address0","token0","address1","token1","ml","symbol","volumeUSD","volumeUSDWeek","lpFees24h","lpApr7d","liquidityUSD","sortField","setSortField","sortDirection","setSortDirection","page","setPage","maxPage","setMaxPage","extraPages","length","ITEMS_PER_INFO_TABLE_PAGE","Math","floor","sortedPools","sort","a","b","slice","handleSort","useCallback","newField","arrow","field","TableWrapper","textTransform","ClickableColumnHeader","onClick","Break","i","Fragment","PageButtons","Arrow","ArrowBackIcon","ArrowForwardIcon","ResponsiveLogo","CurrencyLogo","loadingRow","tokenData","useMatchBreakpoints","isXs","isSm","alignItems","marginLeft","name","fontWeight","priceUSD","notation","Percent","priceUSDChange","maxItems","sortedTokens","orderBy"],"sourceRoot":""}