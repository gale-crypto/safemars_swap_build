{"version":3,"file":"static/chunks/pages/find-6254702431b41d14.js","mappings":"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","sources":["webpack://_N_E/?7d08","webpack://_N_E/./src/views/PoolFinder/index.tsx","webpack://_N_E/./src/pages/find.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/find\",\n      function () {\n        return require(\"private-next-pages/find.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/find\"])\n      });\n    }\n  ","import { Currency, JSBI } from '@pancakeswap/sdk'\nimport { AddIcon, Button, ChevronDownIcon, Text, useModal } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@pancakeswap/wagmi'\nimport { useTranslation } from 'contexts/Localization'\nimport { NextLinkFromReactRouter } from 'components/NextLink'\nimport { BIG_INT_ZERO } from 'config/constants/exchange'\nimport useNativeCurrency from 'hooks/useNativeCurrency'\nimport { useCallback, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { AppBody, AppHeader } from '../../components/App'\nimport { LightCard } from '../../components/Card'\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\nimport Row from '../../components/Layout/Row'\nimport Dots from '../../components/Loader/Dots'\nimport { CurrencyLogo } from '../../components/Logo'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport CurrencySearchModal from '../../components/SearchModal/CurrencySearchModal'\nimport { PairState, usePair } from '../../hooks/usePairs'\nimport { usePairAdder } from '../../state/user/hooks'\nimport { useTokenBalance } from '../../state/wallet/hooks'\nimport { currencyId } from '../../utils/currencyId'\nimport Page from '../Page'\nimport { CommonBasesType } from '../../components/SearchModal/types'\n\nenum Fields {\n  TOKEN0 = 0,\n  TOKEN1 = 1,\n}\n\nconst StyledButton = styled(Button)`\n  background-color: ${({ theme }) => theme.colors.input};\n  color: ${({ theme }) => theme.colors.text};\n  box-shadow: none;\n  border-radius: 16px;\n`\n\nexport default function PoolFinder() {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const native = useNativeCurrency()\n\n  const [activeField, setActiveField] = useState<number>(Fields.TOKEN1)\n  const [currency0, setCurrency0] = useState<Currency | null>(() => native)\n  const [currency1, setCurrency1] = useState<Currency | null>(null)\n\n  const [pairState, pair] = usePair(currency0 ?? undefined, currency1 ?? undefined)\n  const addPair = usePairAdder()\n  useEffect(() => {\n    if (pair) {\n      addPair(pair)\n    }\n  }, [pair, addPair])\n\n  const validPairNoLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS ||\n    Boolean(\n      pairState === PairState.EXISTS &&\n        pair &&\n        JSBI.equal(pair.reserve0.quotient, BIG_INT_ZERO) &&\n        JSBI.equal(pair.reserve1.quotient, BIG_INT_ZERO),\n    )\n\n  const position = useTokenBalance(account ?? undefined, pair?.liquidityToken)\n  const hasPosition = Boolean(position && JSBI.greaterThan(position.quotient, BIG_INT_ZERO))\n\n  const handleCurrencySelect = useCallback(\n    (currency: Currency) => {\n      if (activeField === Fields.TOKEN0) {\n        setCurrency0(currency)\n      } else {\n        setCurrency1(currency)\n      }\n    },\n    [activeField],\n  )\n\n  const prerequisiteMessage = (\n    <LightCard padding=\"45px 10px\">\n      <Text textAlign=\"center\">\n        {!account ? t('Connect to a wallet to find pools') : t('Select a token to find your liquidity.')}\n      </Text>\n    </LightCard>\n  )\n\n  const [onPresentCurrencyModal] = useModal(\n    <CurrencySearchModal\n      onCurrencySelect={handleCurrencySelect}\n      showCommonBases\n      selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\n      commonBasesType={CommonBasesType.LIQUIDITY}\n    />,\n    true,\n    true,\n    'selectCurrencyModal',\n  )\n\n  return (\n    <Page>\n      <AppBody>\n        <AppHeader title={t('Import Pool')} subtitle={t('Import an existing pool')} backTo=\"/liquidity\" />\n        <AutoColumn style={{ padding: '1rem' }} gap=\"md\">\n          <StyledButton\n            endIcon={<ChevronDownIcon />}\n            onClick={() => {\n              onPresentCurrencyModal()\n              setActiveField(Fields.TOKEN0)\n            }}\n          >\n            {currency0 ? (\n              <Row>\n                <CurrencyLogo currency={currency0} />\n                <Text ml=\"8px\">{currency0.symbol}</Text>\n              </Row>\n            ) : (\n              <Text ml=\"8px\">{t('Select a Token')}</Text>\n            )}\n          </StyledButton>\n\n          <ColumnCenter>\n            <AddIcon />\n          </ColumnCenter>\n\n          <StyledButton\n            endIcon={<ChevronDownIcon />}\n            onClick={() => {\n              onPresentCurrencyModal()\n              setActiveField(Fields.TOKEN1)\n            }}\n          >\n            {currency1 ? (\n              <Row>\n                <CurrencyLogo currency={currency1} />\n                <Text ml=\"8px\">{currency1.symbol}</Text>\n              </Row>\n            ) : (\n              <Text as={Row}>{t('Select a Token')}</Text>\n            )}\n          </StyledButton>\n\n          {currency0 && currency1 ? (\n            pairState === PairState.EXISTS ? (\n              hasPosition && pair ? (\n                <>\n                  <MinimalPositionCard pair={pair} />\n                  <Button as={NextLinkFromReactRouter} to=\"/liquidity\" variant=\"secondary\" width=\"100%\">\n                    {t('Manage this pool')}\n                  </Button>\n                </>\n              ) : (\n                <LightCard padding=\"45px 10px\">\n                  <AutoColumn gap=\"sm\" justify=\"center\">\n                    <Text textAlign=\"center\">{t('You donâ€™t have liquidity in this pool yet.')}</Text>\n                    <Button\n                      as={NextLinkFromReactRouter}\n                      to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}\n                      variant=\"secondary\"\n                    >\n                      {t('Add Liquidity')}\n                    </Button>\n                  </AutoColumn>\n                </LightCard>\n              )\n            ) : validPairNoLiquidity ? (\n              <LightCard padding=\"45px 10px\">\n                <AutoColumn gap=\"sm\" justify=\"center\">\n                  <Text textAlign=\"center\">{t('No pool found.')}</Text>\n                  <Button\n                    as={NextLinkFromReactRouter}\n                    to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}\n                    variant=\"secondary\"\n                  >\n                    {t('Create pool')}\n                  </Button>\n                </AutoColumn>\n              </LightCard>\n            ) : pairState === PairState.INVALID ? (\n              <LightCard padding=\"45px 10px\">\n                <AutoColumn gap=\"sm\" justify=\"center\">\n                  <Text textAlign=\"center\" fontWeight={500}>\n                    {t('Invalid pair.')}\n                  </Text>\n                </AutoColumn>\n              </LightCard>\n            ) : pairState === PairState.LOADING ? (\n              <LightCard padding=\"45px 10px\">\n                <AutoColumn gap=\"sm\" justify=\"center\">\n                  <Text textAlign=\"center\">\n                    {t('Loading')}\n                    <Dots />\n                  </Text>\n                </AutoColumn>\n              </LightCard>\n            ) : null\n          ) : (\n            prerequisiteMessage\n          )}\n        </AutoColumn>\n\n        {/* <CurrencySearchModal\n          isOpen={showSearch}\n          onCurrencySelect={handleCurrencySelect}\n          onDismiss={handleSearchDismiss}\n          showCommonBases\n          selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\n        /> */}\n      </AppBody>\n    </Page>\n  )\n}\n","import { CHAIN_IDS } from 'utils/wagmi'\nimport PoolFinder from '../views/PoolFinder'\n\nconst PoolFinderPage = () => <PoolFinder />\n\nPoolFinderPage.chains = CHAIN_IDS\n\nexport default PoolFinderPage\n"],"names":["window","__NEXT_P","push","Fields","TOKEN0","TOKEN1","StyledButton","styled","Button","theme","colors","input","text","PoolFinder","useWeb3React","account","useTranslation","t","native","useNativeCurrency","useState","activeField","setActiveField","currency0","setCurrency0","currency1","setCurrency1","usePair","undefined","pairState","pair","addPair","usePairAdder","useEffect","validPairNoLiquidity","PairState","Boolean","JSBI","reserve0","quotient","BIG_INT_ZERO","reserve1","position","useTokenBalance","liquidityToken","hasPosition","handleCurrencySelect","useCallback","currency","prerequisiteMessage","LightCard","padding","Text","textAlign","onPresentCurrencyModal","useModal","CurrencySearchModal","onCurrencySelect","showCommonBases","selectedCurrency","commonBasesType","CommonBasesType","Page","AppBody","AppHeader","title","subtitle","backTo","AutoColumn","style","gap","endIcon","ChevronDownIcon","onClick","Row","CurrencyLogo","ml","symbol","ColumnCenter","AddIcon","as","MinimalPositionCard","NextLinkFromReactRouter","to","variant","width","justify","currencyId","fontWeight","Dots","PoolFinderPage","chains","CHAIN_IDS"],"sourceRoot":""}